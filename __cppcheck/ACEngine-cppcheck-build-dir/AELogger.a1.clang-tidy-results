C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:22:2: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        m_fwLogger(fname, !clearLog * AEFW_FLAG_APPEND /* Funny magic with bool-int conversion */), 
        ^
C:/Users/artem/CODING/ACEngine/AEFileWriter\include/AEFileWriter.hpp:98:95: note: default parameter was declared here
        explicit AEFileWriter(const std::string_view filename, const cint flags = AEFW_FLAG_NOFLAGS, const ullint af_interval = AEFW_DEFAULT_AUTOFLUSH_INTERVAL);
                                                                                                     ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:22:20: warning: narrowing conversion from 'int' to signed type 'cint' (aka 'signed char') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        m_fwLogger(fname, !clearLog * AEFW_FLAG_APPEND /* Funny magic with bool-int conversion */), 
                          ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:22:20: warning: implicit conversion bool -> 'int' [readability-implicit-bool-conversion]
        m_fwLogger(fname, !clearLog * AEFW_FLAG_APPEND /* Funny magic with bool-int conversion */), 
                          ^
                          static_cast<int>( )
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:24:13: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        m_lepQueue(AELogEntry::makeQueue(queuesize, nullptr)), m_lepLastNode(m_lepQueue + queuesize - 1), 
                   ^
C:/Users/artem/CODING/ACEngine/AECustomTypes\include/AELogEntry.hpp:128:93: note: default parameter was declared here
        static inline AELogEntry* makeQueue(const std::size_t amt, AELogEntry* oldqueue = nullptr, const bool loopQueue = true) {
                                                                                                   ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:24:82: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_lepQueue(AELogEntry::makeQueue(queuesize, nullptr)), m_lepLastNode(m_lepQueue + queuesize - 1), 
                                                                                        ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:24:94: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
        m_lepQueue(AELogEntry::makeQueue(queuesize, nullptr)), m_lepLastNode(m_lepQueue + queuesize - 1), 
                                                                                                    ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:34:123: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
                this->writeToLog("Created the AELogger instance and opened the log session in the file: \"" + std::filesystem::absolute(fname).generic_string() + '\"', AELOG_TYPE_OK, this->m_sModulename);
                                                                                                                                        ^
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\filesystem:649:35: note: default parameter was declared here
        path(const _Src& _Source, format = auto_format) : _Text(_Convert_Source_to_wide(_Source)) {
                                  ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:34:170: warning: static member accessed through instance [readability-static-accessed-through-instance]
                this->writeToLog("Created the AELogger instance and opened the log session in the file: \"" + std::filesystem::absolute(fname).generic_string() + '\"', AELOG_TYPE_OK, this->m_sModulename);
                                                                                                                                                                                       ^~~~~~
                                                                                                                                                                                       AELogger::
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:41:11: warning: an exception may be thrown in function '~AELogger' which should not throw exceptions [bugprone-exception-escape]
AELogger::~AELogger() {
          ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:42:84: warning: static member accessed through instance [readability-static-accessed-through-instance]
        this->writeToLog("Destroying the AELogger instance and closing", AELOG_TYPE_INFO, this->m_sModulename);
                                                                                          ^~~~~~
                                                                                          AELogger::
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:45:2: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        for (std::size_t i = 0; i < this->m_vAllocTable.size(); i++) {
        ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:45:2: warning: use range-based for loop instead [modernize-loop-convert]
        for (std::size_t i = 0; i < this->m_vAllocTable.size(); i++) {
        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            (auto & i : this->m_vAllocTable)
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:46:3: warning: deleting a pointer through a type that is not marked 'gsl::owner<>'; consider using a smart pointer instead [cppcoreguidelines-owning-memory]
                delete[] this->m_vAllocTable[i].second;
                ^                           ~~~
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector:1882:16: note: variable declared here
    _NODISCARD _CONSTEXPR20 _Ty& operator[](const size_type _Pos) noexcept /* strengthened */ {
               ^
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\yvals_core.h:878:22: note: expanded from macro '_CONSTEXPR20'
#define _CONSTEXPR20 constexpr
                     ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:52:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
cint AELogger::startWriter(void) {
~~~~           ^
auto                             -> cint
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:52:28: warning: redundant void argument list in function definition [modernize-redundant-void-arg]
cint AELogger::startWriter(void) {
                           ^~~~
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:53:82: warning: static member accessed through instance [readability-static-accessed-through-instance]
        this->writeToLog("Attempting to start the log-writing thread", AELOG_TYPE_INFO, this->m_sModulename);
                                                                                        ^~~~~~
                                                                                        AELogger::
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:55:83: warning: static member accessed through instance [readability-static-accessed-through-instance]
                this->writeToLog("The log-writing thread is already running!", AELOG_TYPE_WARN, this->m_sModulename);
                                                                                                ^~~~~~
                                                                                                AELogger::
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:62:93: warning: static member accessed through instance [readability-static-accessed-through-instance]
                this->writeToLog("Could not start AELogger thread!! (exception)", AELOG_TYPE_FATAL_ERROR, this->m_sModulename);
                                                                                                          ^~~~~~
                                                                                                          AELogger::
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:71:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
cint AELogger::stopWriter(void) {
~~~~           ^
auto                            -> cint
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:71:27: warning: redundant void argument list in function definition [modernize-redundant-void-arg]
cint AELogger::stopWriter(void) {
                          ^~~~
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:73:84: warning: static member accessed through instance [readability-static-accessed-through-instance]
        this->writeToLog("Attempting to stop the log-writing thread...", AELOG_TYPE_INFO, this->m_sModulename);
                                                                                          ^~~~~~
                                                                                          AELogger::
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:83:16: warning: function 'writeToLog' is within a recursive call chain [misc-no-recursion]
cint AELogger::writeToLog(const std::string_view logmessg, const cint logtype, const std::string_view logmodule) {
               ^
C:\Users\artem\CODING\ACEngine\AELogger\src/../include/AELogger.hpp:185:14: note: example recursive call chain, starting from function 'writeToLogDebug'
        inline cint writeToLogDebug(const std::string_view logmessg, const std::string_view logmodule = AELOG_DEFAULT_MODULE_NAME) {
                    ^
C:\Users\artem\CODING\ACEngine\AELogger\src/../include/AELogger.hpp:187:10: note: Frame #1: function 'writeToLogDebug' calls function 'writeToLog' here:
                return this->writeToLog(logmessg, AELOG_TYPE_DEBUG, logmodule);
                       ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:115:3: note: Frame #2: function 'writeToLog' calls function 'writeToLogDebug' here:
                this->writeToLogDebug("The queue was too small, resized it to " + std::to_string(this->m_ullQueueSize) + " entries", this->m_sModulename);              
                ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:115:3: note: ... which was the starting point of the recursive call chain; there may be other cycles
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:83:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
cint AELogger::writeToLog(const std::string_view logmessg, const cint logtype, const std::string_view logmodule) {
~~~~           ^
auto                                                                                                             -> cint
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:129:2: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
        AELogEntry* ptr = this->ptrFromIndex(m_ullNodeNumber++);
        ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:109:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
                AELogEntry* newQueue = AELogEntry::makeQueue(qsize, this->m_lepQueue);
                                       ^
C:/Users/artem/CODING/ACEngine/AECustomTypes\include/AELogEntry.hpp:128:93: note: default parameter was declared here
        static inline AELogEntry* makeQueue(const std::size_t amt, AELogEntry* oldqueue = nullptr, const bool loopQueue = true) {
                                                                                                   ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:113:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                this->m_lepLastNode = newQueue + qsize - 1;
                                               ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:113:42: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                this->m_lepLastNode = newQueue + qsize - 1;
                                                       ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:115:120: warning: static member accessed through instance [readability-static-accessed-through-instance]
                this->writeToLogDebug("The queue was too small, resized it to " + std::to_string(this->m_ullQueueSize) + " entries", this->m_sModulename);              
                                                                                                                                     ^~~~~~
                                                                                                                                     AELogger::
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:130:2: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while (ptr->m_cStatus != AELE_STATUS_INVALID) {
        ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:130:9: warning: backward branch (while loop) is ID-dependent due to variable reference to 'ptr' and may cause performance degradation [altera-id-dependent-backward-branch]
        while (ptr->m_cStatus != AELE_STATUS_INVALID) {
               ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:139:9: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay,hicpp-no-array-decay]
        memcpy(ptr->m_sLogMessage, logmessg.data(), (logmessg.size() > AELE_MESSAGE_SIZE) ? AELE_MESSAGE_SIZE : logmessg.size());
               ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:140:9: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay,hicpp-no-array-decay]
        memcpy(ptr->m_sModuleName, logmodule.data(), (logmodule.size() > AELE_MODULENAME_SIZE) ? AELE_MODULENAME_SIZE : logmodule.size());
               ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:146:16: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
cint AELogger::writeToLog(const AELogEntry& entry, const bool useCurrentTime) {
~~~~           ^
auto                                                                          -> cint
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:168:2: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
        AELogEntry* ptr = this->ptrFromIndex(m_ullNodeNumber++);
        ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:146:63: warning: parameter 'useCurrentTime' is unused [misc-unused-parameters]
cint AELogger::writeToLog(const AELogEntry& entry, const bool useCurrentTime) {
                                                              ^~~~~~~~~~~~~~
                                                               /*useCurrentTime*/
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:158:26: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
                AELogEntry* newQueue = AELogEntry::makeQueue(qsize, this->m_lepQueue);
                                       ^
C:/Users/artem/CODING/ACEngine/AECustomTypes\include/AELogEntry.hpp:128:93: note: default parameter was declared here
        static inline AELogEntry* makeQueue(const std::size_t amt, AELogEntry* oldqueue = nullptr, const bool loopQueue = true) {
                                                                                                   ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:162:34: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                this->m_lepLastNode = newQueue + qsize - 1;
                                               ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:162:42: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
                this->m_lepLastNode = newQueue + qsize - 1;
                                                       ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:164:120: warning: static member accessed through instance [readability-static-accessed-through-instance]
                this->writeToLogDebug("The queue was too small, resized it to " + std::to_string(this->m_ullQueueSize) + " entries", this->m_sModulename);
                                                                                                                                     ^~~~~~
                                                                                                                                     AELogger::
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:169:2: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while (ptr->m_cStatus != AELE_STATUS_INVALID) {
        ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:169:9: warning: backward branch (while loop) is ID-dependent due to variable reference to 'ptr' and may cause performance degradation [altera-id-dependent-backward-branch]
        while (ptr->m_cStatus != AELE_STATUS_INVALID) {
               ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:181:32: warning: redundant void argument list in function definition [modernize-redundant-void-arg]
void AELogger::logWriterThread(void) {
                               ^~~~
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:183:88: warning: static member accessed through instance [readability-static-accessed-through-instance]
        this->writeToLog("Successfully launched the log-writing thread!", AELOG_TYPE_SUCCESS, this->m_sModulename);
                                                                                              ^~~~~~
                                                                                              AELogger::
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:193:2: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
        char str[AELE_FORMAT_MAX_SIZE]{};
        ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:201:61: warning: implicit conversion '_TVal' (aka 'unsigned long long') -> bool [readability-implicit-bool-conversion]
        while (this->m_bRunTrd.load(std::memory_order::relaxed) || this->m_ullFilledCount.load(std::memory_order::memory_order_relaxed)) {
                                                                   ^
                                                                   (                                                                    != 0u)
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:202:10: warning: implicit conversion '_TVal' (aka 'unsigned long long') -> bool [readability-implicit-bool-conversion]
                while (this->m_ullFilledCount.load(std::memory_order::memory_order_relaxed)) {
                       ^
                                                                                            != 0u
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:187:2: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
        AELogEntry* ePtr = this->m_lepQueue;
        ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:205:4: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
                        while (ePtr->m_cStatus != AELE_STATUS_READY) {
                        ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:205:11: warning: backward branch (while loop) is ID-dependent due to variable reference to 'ePtr' and may cause performance degradation [altera-id-dependent-backward-branch]
                        while (ePtr->m_cStatus != AELE_STATUS_READY) {
                               ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:206:25: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
                                ace::utils::sleepUS(100);
                                                    ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:213:28: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay,hicpp-no-array-decay]
                        AELogEntry::formatEntry(str, *ePtr);
                                                ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:218:35: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay,hicpp-no-array-decay]
                        this->m_fwLogger.writeData_ptr(str, std::strlen(str), 1, false);
                                                       ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:218:52: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay,hicpp-no-array-decay]
                        this->m_fwLogger.writeData_ptr(str, std::strlen(str), 1, false);
                                                                        ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:233:23: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
                ace::utils::sleepUS(1000);
                                    ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:237:26: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay,hicpp-no-array-decay]
        AELogEntry::formatEntry(str,
                                ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:246:33: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay,hicpp-no-array-decay]
        this->m_fwLogger.writeData_ptr(str, std::strlen(str), 1, false);
                                       ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:246:50: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay,hicpp-no-array-decay]
        this->m_fwLogger.writeData_ptr(str, std::strlen(str), 1, false);
                                                        ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:251:23: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
AELogEntry* AELogger::ptrFromIndex(ullint num) noexcept {
~~~~~~~~~~~           ^
auto                                                    -> AELogEntry*
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:254:2: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        for (std::size_t i = 0; i < this->m_vAllocTable.size(); i++) {
        ^
C:\Users\artem\CODING\ACEngine\AELogger\src\AELogger.cpp:254:2: warning: use range-based for loop instead [modernize-loop-convert]
        for (std::size_t i = 0; i < this->m_vAllocTable.size(); i++) {
        ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
            (auto & i : this->m_vAllocTable)



208687 warnings generated.
Suppressed 208617 warnings (208617 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
