C:\Users\artem\CODING\ACEngine\AETimer\main_AETimer.cpp:6:5: warning: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
int main() {
    ^
C:\Users\artem\CODING\ACEngine\AETimer\main_AETimer.cpp:6:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int main() {
~~~ ^
auto       -> int
C:\Users\artem\CODING\ACEngine\AETimer\main_AETimer.cpp:8:2: warning: variable 'a' of type 'AETimer' can be declared 'const' [misc-const-correctness]
        AETimer a(5);
        ^
                const 
C:\Users\artem\CODING\ACEngine\AETimer\main_AETimer.cpp:8:10: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
        AETimer a(5);
                ^
C:\Users\artem\CODING\ACEngine\AETimer\main_AETimer.cpp:8:12: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        AETimer a(5);
                  ^
C:\Users\artem\CODING\ACEngine\AETimer\main_AETimer.cpp:10:2: warning: variable 'mytm' of type 'AETimer' can be declared 'const' [misc-const-correctness]
        AETimer mytm(a);
        ^
                const 
C:\Users\artem\CODING\ACEngine\AETimer\main_AETimer.cpp:12:15: warning: static member accessed through instance [readability-static-accessed-through-instance]
        std::cout << mytm.getModuleAmount() << " " << mytm.getModuleName() << NLC;
                     ^~~~~
                     AETimer::
C:\Users\artem\CODING\ACEngine\AETimer\main_AETimer.cpp:12:48: warning: static member accessed through instance [readability-static-accessed-through-instance]
        std::cout << mytm.getModuleAmount() << " " << mytm.getModuleName() << NLC;
                                                      ^~~~~
                                                      AETimer::
C:\Users\artem\CODING\ACEngine\AETimer\main_AETimer.cpp:13:2: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while (1) {
        ^
C:\Users\artem\CODING\ACEngine\AETimer\main_AETimer.cpp:13:9: warning: converting integer literal to bool, use bool literal instead [modernize-use-bool-literals]
        while (1) {
               ^
note: this fix will not be applied because it overlaps with another fix
C:\Users\artem\CODING\ACEngine\AETimer\main_AETimer.cpp:13:9: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
note: this fix will not be applied because it overlaps with another fix



199154 warnings generated.
Suppressed 199142 warnings (199142 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
