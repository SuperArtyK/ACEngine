C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:45:5: warning: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
int main() {
    ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:45:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int main() {
~~~ ^
auto       -> int
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:47:2: warning: random number generator seeded with a disallowed source of seed value will generate a predictable sequence of values [cert-msc32-c,cert-msc51-cpp]
        std::srand(std::time(NULL));
        ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:47:23: warning: use nullptr [modernize-use-nullptr]
        std::srand(std::time(NULL));
                             ^~~~
                             nullptr
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:48:10: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        AEFrame myr;
                ^
C:/Users/artem/CODING/ACEngine/AEFrame\include/AEFrame.hpp:38:19: note: default parameter was declared here
        explicit AEFrame(const double fps = ENGINE_FPS) : m_tdChronoDelay((fps <= 0) ? microSec(0) : microSec(ullint(1000000.0 / fps))),
                         ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:50:2: warning: variable 'mytm' of type 'AETimer' can be declared 'const' [misc-const-correctness]
        AETimer mytm(10000);
        ^
                const 
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:50:15: warning: 10000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        AETimer mytm(10000);
                     ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:51:24: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        AEVector<std::size_t, 32> veca;
                              ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:52:2: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        for (int i = 0; i < arrsize(veca.dims); i++) {
        ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:53:13: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
                veca[i] = std::rand();
                          ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:53:13: warning: function is not thread safe [concurrency-mt-unsafe]
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:56:11: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        AELogger mylog("acengine_log.txt", true);
                 ^
C:/Users/artem/CODING/ACEngine/AELogger\include/AELogger.hpp:141:75: note: default parameter was declared here
        explicit AELogger(const std::string& fname, const bool clearLog = false, const ullint queuesize = AELOG_DEFAULT_QUEUE_SIZE);
                                                                                 ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:57:6: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
        int a = 0;
            ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:62:2: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while (1) {
        ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:62:9: warning: converting integer literal to bool, use bool literal instead [modernize-use-bool-literals]
        while (1) {
               ^
note: this fix will not be applied because it overlaps with another fix
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:62:9: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
note: this fix will not be applied because it overlaps with another fix
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:65:7: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
                a = std::rand();
                    ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:65:7: warning: function is not thread safe [concurrency-mt-unsafe]
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:66:19: warning: 400 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
                tempstr.reserve(400);
                                ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:68:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
                myfw.writeString("Hello AEFileWriter!\n");
                ^
C:/Users/artem/CODING/ACEngine/AEFileWriter\include/AEFileWriter.hpp:243:45: note: default parameter was declared here
        inline cint writeString(const char* cdata, const bool includeNull = false, const bool useAutoFlush = AEFW_DEFAULT_AUTOFLUSH) {
                                                   ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:70:54: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                tempstr += std::to_string(ace::math::cosDeg<float>(a)) + std::string(" ") + std::to_string(ace::math::cosDeg_table(a))+NLC;
                                                                   ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:70:118: warning: narrowing conversion from 'int' to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                tempstr += std::to_string(ace::math::cosDeg<float>(a)) + std::string(" ") + std::to_string(ace::math::cosDeg_table(a))+NLC;
                                                                                                                                   ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:77:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
                myfw.writeString(tempstr);
                ^
C:/Users/artem/CODING/ACEngine/AEFileWriter\include/AEFileWriter.hpp:207:50: note: default parameter was declared here
        inline cint writeString(const std::string& str, const bool includeNull = false, const bool useAutoFlush = AEFW_DEFAULT_AUTOFLUSH) {
                                                        ^
C:\Users\artem\CODING\ACEngine\ACEngine\main_ACEngine.cpp:81:3: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
                mylog.writeToLog("Successfully have gone through a loop!");
                ^
C:/Users/artem/CODING/ACEngine/AELogger\include/AELogger.hpp:201:47: note: default parameter was declared here
        void writeToLog(const std::string& logmessg, const cint logtype = AELOG_TYPE_INFO, const std::string& logmodule = AELOG_DEFAULT_MODULE_NAME);
                                                     ^



216440 warnings generated.
Suppressed 216405 warnings (216405 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
