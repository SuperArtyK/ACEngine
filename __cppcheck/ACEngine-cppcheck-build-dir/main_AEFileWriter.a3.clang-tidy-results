C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:2:34: warning: extra tokens at end of #include directive [clang-diagnostic-extra-tokens]
#include "include/AETypedefs.hpp""
                                 ^
                                 //
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:2:34: warning: missing terminating '"' character [clang-diagnostic-invalid-pp-token]
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:7:1: warning: do not use namespace using-directives; use using-declarations instead [google-build-using-namespace]
using namespace std;
^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:10:8: warning: accessing fields in struct 'Tempstruct' is inefficient due to padding; only needs 9 bytes but is using 12 bytes [altera-struct-pack-align]
struct Tempstruct {
       ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:10:8: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'Tempstruct'
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:10:8: warning: accessing fields in struct 'Tempstruct' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 16 bytes [altera-struct-pack-align]
struct Tempstruct {
       ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:10:8: note: use "__attribute__((aligned(16)))" to align struct 'Tempstruct' to 16 bytes
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:11:2: warning: consider replacing 'short' with 'int16' [google-runtime-int]
        short a = 12345;
        ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:11:12: warning: 12345 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        short a = 12345;
                  ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:12:2: warning: consider replacing 'unsigned short' with 'uint16' [google-runtime-int]
        unsigned short b = 54321;
        ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:12:21: warning: 54321 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        unsigned short b = 54321;
                           ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:14:12: warning: 12345.67890f is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        float d = 12345.67890f;
                  ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:14:12: warning: floating point literal has suffix 'f', which is not uppercase [hicpp-uppercase-literal-suffix,readability-uppercase-literal-suffix]
        float d = 12345.67890f;
                  ^          ~
                             F
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:18:5: warning: an exception may be thrown in function 'main' which should not throw exceptions [bugprone-exception-escape]
int main() {
    ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:18:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int main() {
~~~ ^
auto       -> int
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:21:2: warning: variable 'a' of type 'std::vector<char>' can be declared 'const' [misc-const-correctness]
        std::vector<char> a{ 'a','b','c','\0','d','e','f','\0' };
        ^
                          const 
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:21:20: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        std::vector<char> a{ 'a','b','c','\0','d','e','f','\0' };
                          ^
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\vector:656:55: note: default parameter was declared here
    _CONSTEXPR20 vector(initializer_list<_Ty> _Ilist, const _Alloc& _Al = _Alloc())
                                                      ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:21:20: warning: variable name 'a' is too short, expected at least 3 characters [readability-identifier-length]
        std::vector<char> a{ 'a','b','c','\0','d','e','f','\0' };
                          ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:22:2: warning: variable 'b' of type 'std::string' (aka 'basic_string<char, char_traits<char>, allocator<char>>') can be declared 'const' [misc-const-correctness]
        std::string b = "abc\0def";
        ^
                    const 
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:22:14: warning: variable name 'b' is too short, expected at least 3 characters [readability-identifier-length]
        std::string b = "abc\0def";
                    ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:22:18: warning: truncated string literal with embedded NUL character [bugprone-string-literal-with-embedded-nul]
        std::string b = "abc\0def";
                        ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:23:14: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
        const char* c = "abc\0def";
                    ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:24:19: warning: variable name 'd' is too short, expected at least 3 characters [readability-identifier-length]
        const Tempstruct d;
                         ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:25:2: warning: random number generator seeded with a disallowed source of seed value will generate a predictable sequence of values [cert-msc32-c,cert-msc51-cpp]
        std::srand(std::time(NULL));
        ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:25:23: warning: use nullptr [modernize-use-nullptr]
        std::srand(std::time(NULL));
                             ^~~~
                             nullptr
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:27:15: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        AEFileWriter myfw;
                     ^
C:\Users\artem\CODING\ACEngine\AEFileWriter/include/AEFileWriter.hpp:114:24: note: default parameter was declared here
        explicit AEFileWriter(const char* filename = "", const cint flags = AEFW_FLAG_NOFLAGS, const ullint af_interval = AEFW_DEFAULT_AUTOFLUSH_INTERVAL) :
                              ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:32:15: warning: performing an implicit widening conversion to type 'size_type' (aka 'unsigned long long') of a multiplication performed in type 'int' [bugprone-implicit-widening-of-multiplication-result]
        vecb.reserve(1024 * 1024 * 1024);
                     ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:32:15: note: make conversion explicit to silence this warning
        vecb.reserve(1024 * 1024 * 1024);
                     ^~~~~~~~~~~~~~~~~~
                     static_cast<size_type>( )
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:32:15: note: perform multiplication in a wider type
        vecb.reserve(1024 * 1024 * 1024);
                     ^~~~~~~~~~~
                     static_cast<long long>( )
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:32:15: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        vecb.reserve(1024 * 1024 * 1024);
                     ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:32:22: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        vecb.reserve(1024 * 1024 * 1024);
                            ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:32:29: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        vecb.reserve(1024 * 1024 * 1024);
                                   ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:33:2: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        for (int i = 0; i < (1024 * 1024 * 1024); i++) {
        ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:33:23: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        for (int i = 0; i < (1024 * 1024 * 1024); i++) {
                             ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:33:30: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        for (int i = 0; i < (1024 * 1024 * 1024); i++) {
                                    ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:33:37: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        for (int i = 0; i < (1024 * 1024 * 1024); i++) {
                                           ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:34:18: warning: rand() has limited randomness; use C++11 random library instead [cert-msc30-c,cert-msc50-cpp]
                vecb.push_back(std::rand());
                               ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:34:18: warning: function is not thread safe [concurrency-mt-unsafe]
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:45:3: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
                for (int i = 0; i < 1; i++) {
                ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:55:23: warning: 2000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
                ace::utils::sleepMS(2000);
                                    ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:61:3: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
                for (int i = 0; i < 1; i++) {
                ^
C:\Users\artem\CODING\ACEngine\AEFileWriter\main_AEFileWriter.cpp:71:23: warning: 2000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
                ace::utils::sleepMS(2000);
                                    ^



206986 warnings generated.
Suppressed 206930 warnings (206930 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
