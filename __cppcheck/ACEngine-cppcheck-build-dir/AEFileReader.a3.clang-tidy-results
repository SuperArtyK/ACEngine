C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:15:2: warning: calling a function that uses a default argument is disallowed [fuchsia-default-arguments-calls]
        m_sFilename(fname), m_ullTotalReads(0), m_szLastReadAmount(0), m_fpFilestr(nullptr) {
        ^
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring:2884:70: note: default parameter was declared here
    _CONSTEXPR20 explicit basic_string(const _StringViewIsh& _Right, const _Alloc& _Al = _Alloc())
                                                                     ^
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:20:15: warning: an exception may be thrown in function 'AEFileReader' which should not throw exceptions [bugprone-exception-escape]
AEFileReader::AEFileReader(AEFileReader&& fr) noexcept :
              ^
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:20:43: warning: parameter name 'fr' is too short, expected at least 3 characters [readability-identifier-length]
AEFileReader::AEFileReader(AEFileReader&& fr) noexcept :
                                          ^
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:21:2: warning: move constructor initializes class member by calling a copy constructor [cert-oop11-cpp,performance-move-constructor-init]
        m_sFilename(fr.m_sFilename), m_ullTotalReads(fr.m_ullTotalReads.load()), 
        ^
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring:2490:18: note: copy constructor being called
    _CONSTEXPR20 basic_string(const basic_string& _Right)
                 ^
C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.37.32822\include\xstring:2758:18: note: candidate move constructor here
    _CONSTEXPR20 basic_string(basic_string&& _Right) noexcept
                 ^
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:32:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
cint AEFileReader::openFile(const std::string_view fname) {
~~~~               ^
auto                                                      -> cint
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:58:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
cint AEFileReader::readString(char* str, const std::size_t dcount) noexcept {
~~~~               ^
auto                                                                        -> cint
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:61:7: warning: implicit conversion 'std::size_t' (aka 'unsigned long long') -> bool [readability-implicit-bool-conversion]
        if (!dcount || !str) {
            ~^
            (       == 0u)
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:61:18: warning: implicit conversion 'char *' -> bool [readability-implicit-bool-conversion]
        if (!dcount || !str) {
                       ~^
                       (    == nullptr)
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:70:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
cint AEFileReader::readStringNL(char* str, const int dcount) noexcept {
~~~~               ^
auto                                                                  -> cint
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:73:7: warning: implicit conversion 'char *' -> bool [readability-implicit-bool-conversion]
        if (!str || !dcount) {
            ~^
            (    == nullptr)
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:73:15: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
        if (!str || !dcount) {
                    ~^
                    (       == 0)
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:77:25: warning: C-style casts are discouraged; use static_cast [google-readability-casting]
        std::memset(str, NULL, std::size_t(dcount) + 1);
                               ^~~~~~~~~~~
                               static_cast<std::size_t>
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:78:20: warning: implicit conversion 'char *' -> bool [readability-implicit-bool-conversion]
        const bool temp = std::fgets(str, dcount, this->m_fpFilestr);
                          ^
                                                                     != nullptr
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:86:6: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
        if (std::feof(this->m_fpFilestr)) {
            ^
                                         != 0
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:94:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
cint AEFileReader::readStringNULL(char* str, const llint dcount) {
~~~~               ^
auto                                                             -> cint
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:97:7: warning: implicit conversion 'char *' -> bool [readability-implicit-bool-conversion]
        if (!str || dcount < 1) {
            ~^
            (    == nullptr)
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:107:22: warning: C-style casts are discouraged; use static_cast (if needed, the cast may be redundant) [google-readability-casting]
        fseek(m_fpFilestr, -llint((dcount - (nulchar - str) - 1)), SEEK_CUR);
                            ^~~~~
                            static_cast<llint>
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:113:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
cint AEFileReader::readBoolString(bool& num) noexcept {
~~~~               ^
auto                                                  -> cint
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:115:2: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
        char str[sizeof("false")]{};
        ^
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:117:33: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay,hicpp-no-array-decay]
        cint temp = this->readData_ptr(str, 4, sizeof(char)); //read possible "true"
                                       ^
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:118:2: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        for (int i = 0; i < 4; i++) {
        ^
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:119:3: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
                str[i] = std::tolower(str[i]);
                ^
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:119:12: warning: narrowing conversion from 'int' to signed type 'char' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
                str[i] = std::tolower(str[i]);
                         ^
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:119:25: warning: do not use array subscript when the index is not an integer constant expression [cppcoreguidelines-pro-bounds-constant-array-index]
                str[i] = std::tolower(str[i]);
                                      ^
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:122:7: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
        if (!std::memcmp(str, "true", sizeof("true"))) {
            ~^
                                                      == 0
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:122:19: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay,hicpp-no-array-decay]
        if (!std::memcmp(str, "true", sizeof("true"))) {
                         ^
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:128:7: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
        if (!std::memcmp(str, "false", sizeof("false"))) {
            ~^
                                                        == 0
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:128:19: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay,hicpp-no-array-decay]
        if (!std::memcmp(str, "false", sizeof("false"))) {
                         ^
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:136:20: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
cint AEFileReader::readData_ptr(void* cdata, const std::size_t dcount, const std::size_t dsize) noexcept {
~~~~               ^
auto                                                                                                     -> cint
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:139:7: warning: implicit conversion 'void *' -> bool [readability-implicit-bool-conversion]
        if (!cdata || !dcount || !dsize) {
            ~^
            (      == nullptr)
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:139:17: warning: implicit conversion 'std::size_t' (aka 'unsigned long long') -> bool [readability-implicit-bool-conversion]
        if (!cdata || !dcount || !dsize) {
                      ~^
                      (       == 0u)
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:139:28: warning: implicit conversion 'std::size_t' (aka 'unsigned long long') -> bool [readability-implicit-bool-conversion]
        if (!cdata || !dcount || !dsize) {
                                 ~^
                                 (      == 0u)
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:146:7: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
                if (std::feof(this->m_fpFilestr)) {
                    ^
                                                 != 0
C:\Users\artem\CODING\ACEngine\AEFileReader\src\AEFileReader.cpp:149:7: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
                if (std::ferror(this->m_fpFilestr)) {
                    ^
                                                   != 0



207058 warnings generated.
Suppressed 207017 warnings (207017 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
