C:\Users\artem\CODING\ACEngine\AELogParser\src/../include/AELogParser.hpp:74:24: error: no member named 'parseStringEntry' in 'AELogParser' [clang-diagnostic-error]
                        parsedEntry = this->parseStringEntry(dummyentry, fileline, AELP_PARSE_STRING_WRITE_TYPE);
                                      ~~~~  ^
C:\Users\artem\CODING\ACEngine\AELogParser\src/../include/AELogParser.hpp:74:63: error: use of undeclared identifier 'AELP_PARSE_STRING_WRITE_TYPE' [clang-diagnostic-error]
                        parsedEntry = this->parseStringEntry(dummyentry, fileline, AELP_PARSE_STRING_WRITE_TYPE);
                                                                                   ^
C:\Users\artem\CODING\ACEngine\AELogParser\src\AELogParser.cpp:11:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
cint AELogParser::nextEntry(AELogEntry& entry, const cint severity) {
~~~~              ^
auto                                                                -> cint
C:\Users\artem\CODING\ACEngine\AELogParser\src\AELogParser.cpp:16:2: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,hicpp-avoid-c-arrays,modernize-avoid-c-arrays]
        char str[AELE_FORMAT_MAX_SIZE + 2]{}; // 1 character more than the log entry - to determine the validity with size
        ^
C:\Users\artem\CODING\ACEngine\AELogParser\src\AELogParser.cpp:19:2: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while (1) {
        ^
C:\Users\artem\CODING\ACEngine\AELogParser\src\AELogParser.cpp:19:9: warning: converting integer literal to bool, use bool literal instead [modernize-use-bool-literals]
        while (1) {
               ^
note: this fix will not be applied because it overlaps with another fix
C:\Users\artem\CODING\ACEngine\AELogParser\src\AELogParser.cpp:19:9: warning: implicit conversion 'int' -> bool [readability-implicit-bool-conversion]
note: this fix will not be applied because it overlaps with another fix
C:\Users\artem\CODING\ACEngine\AELogParser\src\AELogParser.cpp:30:35: warning: narrowing conversion from 'unsigned long long' to signed type 'llint' (aka 'long long') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        this->m_frLogReader.setCursorPos(this->m_vecEntryIndices[this->m_ullCurrentEntry].first, SEEK_SET);
                                         ^
C:\Users\artem\CODING\ACEngine\AELogParser\src\AELogParser.cpp:32:56: warning: do not implicitly decay an array into a pointer; consider using gsl::array_view or an explicit cast instead [cppcoreguidelines-pro-bounds-array-to-pointer-decay,hicpp-no-array-decay]
        const cint readret = this->m_frLogReader.readStringNL(str, sizeof(str) - 1);
                                                              ^
C:\Users\artem\CODING\ACEngine\AELogParser\src\AELogParser.cpp:34:16: error: no member named 'parseStringEntry' in 'AELogParser' [clang-diagnostic-error]
                return this->parseStringEntry(entry, str, AELP_PARSE_STRING_FULL);
                       ~~~~  ^
C:\Users\artem\CODING\ACEngine\AELogParser\src\AELogParser.cpp:34:45: error: use of undeclared identifier 'AELP_PARSE_STRING_FULL' [clang-diagnostic-error]
                return this->parseStringEntry(entry, str, AELP_PARSE_STRING_FULL);
                                                          ^
C:\Users\artem\CODING\ACEngine\AELogParser\src\AELogParser.cpp:41:19: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
cint AELogParser::logToQueue(AELogEntry*& begin, const cint severity) {
~~~~              ^
auto                                                                  -> cint
C:\Users\artem\CODING\ACEngine\AELogParser\src\AELogParser.cpp:46:2: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
        AELogEntry* ptr = begin = AELogEntry::makeQueue(this->amountValidEntries(severity), nullptr, false);
        ^
C:\Users\artem\CODING\ACEngine\AELogParser\src\AELogParser.cpp:56:2: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while (ptr && (retval = this->nextEntry(*ptr, severity)) == AELP_ERR_NOERROR) {
        ^
C:\Users\artem\CODING\ACEngine\AELogParser\src\AELogParser.cpp:56:9: warning: backward branch (while loop) is ID-dependent due to variable reference to 'ptr' and may cause performance degradation [altera-id-dependent-backward-branch]
        while (ptr && (retval = this->nextEntry(*ptr, severity)) == AELP_ERR_NOERROR) {
               ^
C:\Users\artem\CODING\ACEngine\AELogParser\src\AELogParser.cpp:56:9: warning: implicit conversion 'AELogEntry *' -> bool [readability-implicit-bool-conversion]
        while (ptr && (retval = this->nextEntry(*ptr, severity)) == AELP_ERR_NOERROR) {
               ^
               (   != nullptr)



209397 warnings and 4 errors generated.
Error while processing C:\Users\artem\CODING\ACEngine\AELogParser\src\AELogParser.cpp.
Suppressed 209382 warnings (209382 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
Found compiler error(s).
