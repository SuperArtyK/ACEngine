.TH "ace::utils" 3 "Thu Feb 29 2024 20:45:23" "Version v0.0.8.5a" "ArtyK's Console Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ace::utils \- Global usefull utilities\&.  

.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "constexpr const char * \fBboolToString\fP (const bool b) noexcept"
.br
.RI "Converts bool to the word version\&. "
.ti -1c
.RI "template<typename T , typename Y  = T, typename U  = T> constexpr bool \fBisInRange\fP (const T minval, const Y maxval, const U i) noexcept"
.br
.RI "Checks if the value that you passed is within range\&. "
.ti -1c
.RI "void \fBtoLowerRef\fP (std::string &str1)"
.br
.RI "Lowers the passed std::string by reference\&. "
.ti -1c
.RI "std::string \fBtoLowerVal\fP (std::string str1)"
.br
.RI "Returns the lowered version of passed std::string\&. "
.ti -1c
.RI "void \fBtoUpperRef\fP (std::string &str1)"
.br
.RI "Uppers the passed std::string by reference\&. "
.ti -1c
.RI "std::string \fBtoUpperVal\fP (std::string str1)"
.br
.RI "Returns the uppered version of passed std::string\&. "
.ti -1c
.RI "template<const bool checkFloat = true> constexpr bool \fBisNum\fP (const std::string_view strnum) noexcept"
.br
.RI "Checks if the given string is a numerical value\&. "
.ti -1c
.RI "std::string \fBformatDate\fP (const time_t timept)"
.br
.RI "Formats the current (c)time point as YYYY-MM-DD\&.HH:mm:SS\&. "
.ti -1c
.RI "char * \fBformatDate\fP (const time_t timept, char *const str) noexcept"
.br
.RI "Formats the current (c)time point as YYYY-MM-DD\&.HH:mm:SS\&. "
.ti -1c
.RI "std::string \fBgetCurrentDate\fP (void)"
.br
.RI "Retrieves the current date and time and formats it in the YYYY-MM-DD\&.HH:mm:SS\&. "
.ti -1c
.RI "time_t \fBstringToDate\fP (const char *const timestr, const char *const timeformat='%Y\-%m\-%d\&.%X')"
.br
.ti -1c
.RI "std::string \fBaddrToStr\fP (const void *const myptr) noexcept"
.br
.RI "Converts the hex address value to string\&. "
.ti -1c
.RI "void \fBsleepMS\fP (const int ms) noexcept"
.br
.RI "Convenient sleep function to sleep the thread for ms milliseconds\&. "
.ti -1c
.RI "void \fBsleepUS\fP (const int us) noexcept"
.br
.RI "Convenient sleep function to sleep the thread for ms microseconds\&. "
.ti -1c
.RI "std::FILE * \fBfopenCC\fP (const char *const fname, const char *const flags) noexcept"
.br
.RI "fopen-cross-compiler --just a cross-compiler wrapper of FILE's fopen to do it properly\&. "
.ti -1c
.RI "constexpr int \fBcharToInt\fP (const char c) noexcept"
.br
.RI "Converts the given character value to int ('0' to 0), if it is within the '0'->'9' range\&. "
.ti -1c
.RI "constexpr char \fBintToChar\fP (const int i) noexcept"
.br
.RI "Converts the given int value to char (0 to '0'), if it is within the 0->9 range\&. "
.ti -1c
.RI "constexpr bool \fBisAlNum\fP (const std::string_view str)"
.br
.RI "Checks if the passed string is alpha-numeric (contains only numbers and english letters) "
.ti -1c
.RI "constexpr bool \fBisAlNumUs\fP (const std::string_view str)"
.br
.RI "Checks if the passed string is alpha-numeric with underscores (contains only numbers, english letters, and underscores) "
.in -1c
.SH "Detailed Description"
.PP 
Global usefull utilities\&. 
.SH "Function Documentation"
.PP 
.SS "std::string ace::utils::addrToStr (const void *const myptr)\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Converts the hex address value to string\&. 
.PP
\fBParameters\fP
.RS 4
\fImyptr\fP Pointer to whatever memory adress
.RE
.PP
\fBReturns\fP
.RS 4
std::string with the hexadecimal version of the adress
.RE
.PP

.PP
Definition at line \fB333\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "constexpr const char * ace::utils::boolToString (const bool b)\fR [constexpr]\fP, \fR [noexcept]\fP"

.PP
Converts bool to the word version\&. 
.PP
\fBParameters\fP
.RS 4
\fIb\fP The boolean to convert
.RE
.PP
\fBReturns\fP
.RS 4
const char* of 'true' or 'false'
.RE
.PP

.PP
Definition at line \fB141\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "constexpr int ace::utils::charToInt (const char c)\fR [constexpr]\fP, \fR [noexcept]\fP"

.PP
Converts the given character value to int ('0' to 0), if it is within the '0'->'9' range\&. 
.PP
\fBParameters\fP
.RS 4
\fIc\fP The character value to convert
.RE
.PP
\fBReturns\fP
.RS 4
int's 0-9 values if the given char value is within range, -1 otherwise
.RE
.PP

.PP
Definition at line \fB384\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "std::FILE * ace::utils::fopenCC (const char *const fname, const char *const flags)\fR [inline]\fP, \fR [noexcept]\fP"

.PP
fopen-cross-compiler --just a cross-compiler wrapper of FILE's fopen to do it properly\&. Opens the file with given name and flags\&. Needed so i dont need to retype ifdef for each of file openings Makes code cleaner\&.\&.\&.relatively
.PP
\fBParameters\fP
.RS 4
\fIfname\fP File name, as you'd pass to fopen
.br
\fIflags\fP File flags, as you'd pass to fopen
.RE
.PP

.PP
Definition at line \fB365\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "std::string ace::utils::formatDate (const time_t timept)\fR [inline]\fP"

.PP
Formats the current (c)time point as YYYY-MM-DD\&.HH:mm:SS\&. 
.PP
\fBWarning\fP
.RS 4
If -1 was passed, fails and returns empty string;
.RE
.PP
\fBParameters\fP
.RS 4
\fItimept\fP C time point
.RE
.PP
\fBReturns\fP
.RS 4
std::string of the formatted string
.RE
.PP

.PP
Definition at line \fB262\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "char * ace::utils::formatDate (const time_t timept, char *const str)\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Formats the current (c)time point as YYYY-MM-DD\&.HH:mm:SS\&. 
.PP
\fBWarning\fP
.RS 4
If -1 was passed, fails and doesn't modify the string contents 
.PP
On fail, returns the passed string\&.
.RE
.PP
\fBParameters\fP
.RS 4
\fItimept\fP C time point
.br
\fIstr\fP The c-string to write the value to\&. Must be at least 20 bytes long (19 characters with 1 null terminator)
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.PP
Definition at line \fB289\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "std::string ace::utils::getCurrentDate (void)\fR [inline]\fP"

.PP
Retrieves the current date and time and formats it in the YYYY-MM-DD\&.HH:mm:SS\&. 
.PP
\fBReturns\fP
.RS 4
std::stringof the current date in YYYY-MM-DD\&.HH:mm:SS format
.RE
.PP

.PP
Definition at line \fB312\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "constexpr char ace::utils::intToChar (const int i)\fR [constexpr]\fP, \fR [noexcept]\fP"

.PP
Converts the given int value to char (0 to '0'), if it is within the 0->9 range\&. 
.PP
\fBParameters\fP
.RS 4
\fIi\fP The integer value to convert
.RE
.PP
\fBReturns\fP
.RS 4
char's '0'->'9' values if the given char value is within range, -1 otherwise
.RE
.PP

.PP
Definition at line \fB393\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "constexpr bool ace::utils::isAlNum (const std::string_view str)\fR [inline]\fP, \fR [constexpr]\fP"

.PP
Checks if the passed string is alpha-numeric (contains only numbers and english letters) 
.PP
\fBParameters\fP
.RS 4
\fIstr\fP The passed string to check
.RE
.PP
\fBReturns\fP
.RS 4
true if it is alpha-numeric, false otherwise
.RE
.PP

.PP
Definition at line \fB402\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "constexpr bool ace::utils::isAlNumUs (const std::string_view str)\fR [inline]\fP, \fR [constexpr]\fP"

.PP
Checks if the passed string is alpha-numeric with underscores (contains only numbers, english letters, and underscores) 
.PP
\fBParameters\fP
.RS 4
\fIstr\fP The passed string to check
.RE
.PP
\fBReturns\fP
.RS 4
true if it is alpha-numeric with underscores, false otherwise
.RE
.PP

.PP
Definition at line \fB411\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "template<typename T , typename Y  = T, typename U  = T> constexpr bool ace::utils::isInRange (const T minval, const Y maxval, const U i)\fR [constexpr]\fP, \fR [noexcept]\fP"

.PP
Checks if the value that you passed is within range\&. 
.PP
\fBNote\fP
.RS 4
The type of the values you pass to this function shall be the same
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP The 1st type of values to compare
.br
\fIY\fP The 2nd type of values to compare (defaults to T)
.br
\fIU\fP The 3rd type of values to compare (defaults to T)
.RE
.PP
\fBParameters\fP
.RS 4
\fIminval\fP Minimum value of the range of values
.br
\fImaxval\fP Maximum value of the range of values
.br
\fIi\fP The value to check
.RE
.PP
\fBReturns\fP
.RS 4
True if the value is in the range, false otherwise
.RE
.PP

.PP
Definition at line \fB157\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "template<const bool checkFloat = true> constexpr bool ace::utils::isNum (const std::string_view strnum)\fR [constexpr]\fP, \fR [noexcept]\fP"

.PP
Checks if the given string is a numerical value\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIcheckFloat\fP Template flag whether to check for integer values (false) or any/float values (true)
.RE
.PP
\fBParameters\fP
.RS 4
\fIstrnum\fP String object (any, std::string, c-string, etc), 'number' to check
.RE
.PP
\fBReturns\fP
.RS 4
True if that string is indeed a number, false otherwise
.RE
.PP

.PP
Definition at line \fB205\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "void ace::utils::sleepMS (const int ms)\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Convenient sleep function to sleep the thread for ms milliseconds\&. 
.PP
\fBNote\fP
.RS 4
May be inaccurate in delay (as\&.\&.\&.all sleep functions are)
.RE
.PP
\fBParameters\fP
.RS 4
\fIms\fP The amount of milliseconds to sleep
.RE
.PP

.PP
Definition at line \fB344\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "void ace::utils::sleepUS (const int us)\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Convenient sleep function to sleep the thread for ms microseconds\&. 
.PP
\fBNote\fP
.RS 4
May be inaccurate in delay (as\&.\&.\&.all sleep functions are)
.RE
.PP
\fBParameters\fP
.RS 4
\fIus\fP The amount of microseconds to sleep
.RE
.PP

.PP
Definition at line \fB353\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "time_t ace::utils::stringToDate (const char *const timestr, const char *const timeformat = \fR'%Y\-%m\-%d\&.%X'\fP)\fR [inline]\fP"

.PP
Definition at line \fB316\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "void ace::utils::toLowerRef (std::string & str1)\fR [inline]\fP"

.PP
Lowers the passed std::string by reference\&. 
.PP
\fBParameters\fP
.RS 4
\fIstr1\fP The string to be lowered
.RE
.PP

.PP
Definition at line \fB165\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "std::string ace::utils::toLowerVal (std::string str1)\fR [inline]\fP"

.PP
Returns the lowered version of passed std::string\&. 
.PP
\fBParameters\fP
.RS 4
\fIstr1\fP The string to be lowered
.RE
.PP
\fBReturns\fP
.RS 4
The lowered version of the string
.RE
.PP

.PP
Definition at line \fB174\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "void ace::utils::toUpperRef (std::string & str1)\fR [inline]\fP"

.PP
Uppers the passed std::string by reference\&. 
.PP
\fBParameters\fP
.RS 4
\fIstr1\fP The string to be uppered
.RE
.PP

.PP
Definition at line \fB183\fP of file \fBAEUtils\&.hpp\fP\&.
.SS "std::string ace::utils::toUpperVal (std::string str1)\fR [inline]\fP"

.PP
Returns the uppered version of passed std::string\&. 
.PP
\fBParameters\fP
.RS 4
\fIstr1\fP The string to be uppered
.RE
.PP
\fBReturns\fP
.RS 4
The uppered version of the string
.RE
.PP

.PP
Definition at line \fB192\fP of file \fBAEUtils\&.hpp\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for ArtyK's Console Engine from the source code\&.
