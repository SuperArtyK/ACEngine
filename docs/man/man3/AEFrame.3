.TH "AEFrame" 3 "Fri Feb 2 2024 00:44:14" "Version v0.0.8.5a" "ArtyK's Console Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AEFrame \- This is the ArtyK's Engine's frame delay module -- it allows to create precise delays for game loops\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <AEFrame\&.hpp>\fP
.PP
Inherits \fB__AEModuleBase< AEFrame >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAEFrame\fP (\fBconst\fP double \fBfps\fP=\fBENGINE_FPS\fP) \fBnoexcept\fP"
.br
.RI "Class constructor\&. "
.ti -1c
.RI "\fBAEFrame\fP (\fBconst\fP \fBAEFrame\fP &\fBtwo\fP)"
.br
.ti -1c
.RI "\fBAEFrame\fP & \fBoperator=\fP (\fBconst\fP \fBAEFrame\fP &\fBtwo\fP)"
.br
.ti -1c
.RI "\fBvoid\fP \fBsetFps\fP (\fBconst\fP double \fBfps\fP) \fBnoexcept\fP"
.br
.RI "Resets the delay value to what you pass to it\&. "
.ti -1c
.RI "\fBvoid\fP \fBsleep\fP (\fBvoid\fP)"
.br
.RI "Puts the current thread to sleep up to the set fps goal\&. "
.ti -1c
.RI "\fBvoid\fP \fBresetTimePoint\fP (\fBvoid\fP) \fBnoexcept\fP"
.br
.RI "Resets the time point in the \fBAEFrame\fP to current system time\&. "
.ti -1c
.RI "double \fBgetFrameRate\fP (\fBvoid\fP) \fBconst\fP \fBnoexcept\fP"
.br
.RI "Returns the fps goal of \fBAEFrame\fP instance\&. "
.ti -1c
.RI "double \fBgetDelay\fP (\fBvoid\fP) \fBconst\fP \fBnoexcept\fP"
.br
.RI "Returns the maximum \fBAEFrame\fP's delay from the set fps, in seconds\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "\fBstatic\fP \fBullint\fP \fBgetModuleAmount\fP (\fBvoid\fP) \fBnoexcept\fP"
.br
.RI "Returns the amount of instances of the module currently existing\&. "
.ti -1c
.RI "\fBstatic\fP \fBconstexpr\fP std::string_view \fBgetModuleName\fP (\fBvoid\fP) \fBnoexcept\fP"
.br
.RI "Returns the name of the registered module\&. "
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "\fBstatic\fP std::atomic< \fBullint\fP > \fBm_ullModulesAlive\fP"
.br
.RI "Amount of alive module instances\&. "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBtimeDur\fP< double > \fBm_tdChronoDelay\fP"
.br
.RI "The time duration for the delay in sleeps 
.br
 "
.ti -1c
.RI "\fBtimePoint\fP< \fBSteadyTime\fP, \fBdecltype\fP(\fBm_tdChronoDelay\fP)> \fBm_tpTimepoint\fP"
.br
.RI "The timepoint, that sets time when to wake up the thread\&. "
.ti -1c
.RI "double \fBm_fFPS\fP"
.br
.ti -1c
.RI "bool \fBm_bNoDelay\fP"
.br
.RI "The flag if we don't need the delay, err, for some reason\&. "
.in -1c
.SH "Detailed Description"
.PP 
This is the ArtyK's Engine's frame delay module -- it allows to create precise delays for game loops\&. 

It works by sleeping the difference between the time spent by code in the loop and the time per each frame\&.
.PP
For example: if you want the loop to have 100 cycles/second or fps (10 milliseconds), and the code takes 5ms to complete, then the \fBAEFrame\fP will sleep that loop thread for 5ms\&.
.PP
Hungarian notation is fd\&. (m_fdMyFrameDelay) 
.PP
\fBNote\fP
.RS 4
To get this to work properly, make an object outside of the loop, and put the call to \fBAEFrame::sleep()\fP as the very last/first thing in the loop\&. 
.RE
.PP
\fBWarning\fP
.RS 4
If the game loop takes more time than the set fps goal amount, the frame times can be unpredictable (and\&.\&.\&.delay might also not work) (working to fix that) 
.RE
.PP

.PP
Definition at line \fB30\fP of file \fBAEFrame\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "AEFrame::AEFrame (\fBconst\fP double fps = \fC\fBENGINE_FPS\fP\fP)\fC [inline]\fP, \fC [explicit]\fP, \fC [noexcept]\fP"

.PP
Class constructor\&. 
.PP
\fBNote\fP
.RS 4
if you pass it 0 or negative number it will disable the delay untill a proper value is given
.RE
.PP
\fBParameters\fP
.RS 4
\fIfps\fP The fps goal that the frame delay module will try to achieve
.RE
.PP

.PP
Definition at line \fB40\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "AEFrame::AEFrame (\fBconst\fP \fBAEFrame\fP & two)\fC [inline]\fP"

.PP
Definition at line \fB45\fP of file \fBAEFrame\&.hpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "double AEFrame::getDelay (\fBvoid\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns the maximum \fBAEFrame\fP's delay from the set fps, in seconds\&. 
.PP
\fBReturns\fP
.RS 4
double of the maximum \fBAEFrame\fP's delay in real-world seconds
.RE
.PP

.PP
Definition at line \fB108\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "double AEFrame::getFrameRate (\fBvoid\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns the fps goal of \fBAEFrame\fP instance\&. 
.PP
\fBReturns\fP
.RS 4
double of the given fps goal
.RE
.PP

.PP
Definition at line \fB102\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "\fBstatic\fP \fBullint\fP \fB__AEModuleBase\fP< \fBAEFrame\fP  >::getModuleAmount (\fBvoid\fP)\fC [inline]\fP, \fC [static]\fP, \fC [noexcept]\fP, \fC [inherited]\fP"

.PP
Returns the amount of instances of the module currently existing\&. 
.PP
\fBReturns\fP
.RS 4
Unsigned long long of the module amount
.RE
.PP

.PP
Definition at line \fB85\fP of file \fBAEModuleBase\&.hpp\fP\&.
.SS "\fBstatic\fP \fBconstexpr\fP std::string_view \fB__AEModuleBase\fP< \fBAEFrame\fP  >::getModuleName (\fBvoid\fP)\fC [static]\fP, \fC [constexpr]\fP, \fC [noexcept]\fP, \fC [inherited]\fP"

.PP
Returns the name of the registered module\&. 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SS "\fBAEFrame\fP & AEFrame::operator= (\fBconst\fP \fBAEFrame\fP & two)\fC [inline]\fP"

.PP
Definition at line \fB50\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "\fBvoid\fP AEFrame::resetTimePoint (\fBvoid\fP)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Resets the time point in the \fBAEFrame\fP to current system time\&. Helps if the gameloop delay was much bigger than AEFrames for a long time (it causes delay to stop working untill it catches up) 
.PP
Definition at line \fB94\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "\fBvoid\fP AEFrame::setFps (\fBconst\fP double fps)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Resets the delay value to what you pass to it\&. 
.PP
\fBNote\fP
.RS 4
if you pass it 0 or negative number it will disable the delay untill a proper value is given
.RE
.PP
\fBParameters\fP
.RS 4
\fIfps\fP The fps goal that the frame delay module will try to achieve
.RE
.PP

.PP
Definition at line \fB67\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "\fBvoid\fP AEFrame::sleep (\fBvoid\fP)\fC [inline]\fP"

.PP
Puts the current thread to sleep up to the set fps goal\&. Example: if the fps goal was set to 30fps (~~33ms) and a game loop takes 13ms, then the thread will sleep the rest of 20ms to make the game loop run at 30fps\&. 
.PP
Definition at line \fB79\fP of file \fBAEFrame\&.hpp\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "bool AEFrame::m_bNoDelay\fC [private]\fP"

.PP
The flag if we don't need the delay, err, for some reason\&. 
.PP
Definition at line \fB118\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "double AEFrame::m_fFPS\fC [private]\fP"

.PP
Definition at line \fB116\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "\fBtimeDur\fP<double> AEFrame::m_tdChronoDelay\fC [private]\fP"

.PP
The time duration for the delay in sleeps 
.br
 
.PP
Definition at line \fB113\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "\fBtimePoint\fP<\fBSteadyTime\fP, \fBdecltype\fP(\fBm_tdChronoDelay\fP)> AEFrame::m_tpTimepoint\fC [private]\fP"

.PP
The timepoint, that sets time when to wake up the thread\&. 
.PP
Definition at line \fB115\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "std::atomic<\fBullint\fP> \fB__AEModuleBase\fP< \fBAEFrame\fP  >::m_ullModulesAlive\fC [inline]\fP, \fC [static]\fP, \fC [protected]\fP, \fC [inherited]\fP"

.PP
Amount of alive module instances\&. 
.PP
Definition at line \fB100\fP of file \fBAEModuleBase\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ArtyK's Console Engine from the source code\&.
