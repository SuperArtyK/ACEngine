.TH "AEFrame" 3 "Thu Nov 9 2023 20:42:39" "Version v0.0.8a" "ArtyK's Console Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AEFrame \- This is the ArtyK's Engine's frame delay module -- it allows to create precise delays for game loops\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <AEFrame\&.hpp>\fP
.PP
Inherits \fB__AEModuleBase< AEFrame >\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBAEFrame\fP (\fBconst\fP double \fBfps\fP=\fBENGINE_FPS\fP) \fBnoexcept\fP"
.br
.RI "Class constructor\&. "
.ti -1c
.RI "\fBvoid\fP \fBsetFps\fP (\fBconst\fP double \fBfps\fP) \fBnoexcept\fP"
.br
.RI "Resets the delay value to what you pass to it\&. "
.ti -1c
.RI "\fBvoid\fP \fBsleep\fP (\fBvoid\fP)"
.br
.RI "Puts the current thread to sleep up to the set fps goal\&. "
.ti -1c
.RI "\fBvoid\fP \fBresetTimePoint\fP (\fBvoid\fP) \fBnoexcept\fP"
.br
.RI "Resets the time point in the \fBAEFrame\fP to current system time\&. "
.ti -1c
.RI "double \fBgetFrameRate\fP (\fBvoid\fP) \fBconst\fP \fBnoexcept\fP"
.br
.RI "Returns the fps goal of \fBAEFrame\fP instance\&. "
.ti -1c
.RI "double \fBgetDelay\fP (\fBvoid\fP) \fBconst\fP \fBnoexcept\fP"
.br
.RI "Returns the maximum \fBAEFrame\fP's delay from the set fps, in seconds\&. "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "\fBstatic\fP \fBullint\fP \fBgetModuleAmount\fP (\fBvoid\fP) \fBnoexcept\fP"
.br
.RI "Returns the amount of instances of the module currently existing\&. "
.ti -1c
.RI "\fBstatic\fP std::string_view \fBgetModuleName\fP (\fBvoid\fP) \fBnoexcept\fP"
.br
.RI "Returns the name of the registered module\&. "
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "\fBstatic\fP \fBconst\fP std::string_view \fBm_sModulename\fP"
.br
.RI "Name of the module (class), same as in code\&. "
.ti -1c
.RI "\fBstatic\fP std::atomic< \fBullint\fP > \fBm_ullModulesAlive\fP"
.br
.RI "amount of alive module instances "
.in -1c
.SS "Private Attributes"

.in +1c
.ti -1c
.RI "\fBtimeDur\fP< double > \fBm_tdChronoDelay\fP"
.br
.RI "The time duration for the delay in sleeps 
.br
 "
.ti -1c
.RI "\fBtimePoint\fP< \fBSteadyTime\fP, \fBdecltype\fP(\fBm_tdChronoDelay\fP)> \fBm_tpTimepoint\fP"
.br
.RI "The timepoint, that sets time when to wake up the thread\&. "
.ti -1c
.RI "double \fBm_fFPS\fP"
.br
.ti -1c
.RI "bool \fBm_bNoDelay\fP"
.br
.RI "The flag if we don't need the delay, err, for some reason\&. "
.in -1c
.SH "Detailed Description"
.PP 
This is the ArtyK's Engine's frame delay module -- it allows to create precise delays for game loops\&. 

Hungarian notation is r\&. So instead of guessing the delay for the main game loop, and having unreliable call to normal 'sleep for x', you can always rely on this to delay/sleep the thread to make the game loop run at same time to achieve the fps that you set earlier\&. 
.PP
\fBNote\fP
.RS 4
To get this to work properly, make an object outside of the loop, and put the call to \fBAEFrame::sleep()\fP at the end of the loop\&. 
.PP
This works by looking at the time spent by the game loop and sleeping up to the time to meet the fps goal\&. 
.RE
.PP
\fBWarning\fP
.RS 4
If the game loop takes more time than the set fps goal amount, the frame times can be unpredictable (and\&.\&.\&.delay might also not work) 
.RE
.PP

.PP
Definition at line \fB29\fP of file \fBAEFrame\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "AEFrame::AEFrame (\fBconst\fP double fps = \fC\fBENGINE_FPS\fP\fP)\fC [inline]\fP, \fC [explicit]\fP, \fC [noexcept]\fP"

.PP
Class constructor\&. 
.PP
\fBNote\fP
.RS 4
if you pass it 0 or negative number it will disable the delay untill a proper value is given
.RE
.PP
\fBParameters\fP
.RS 4
\fIfps\fP The fps goal that the frame delay module will try to achieve
.RE
.PP

.PP
Definition at line \fB38\fP of file \fBAEFrame\&.hpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "double AEFrame::getDelay (\fBvoid\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns the maximum \fBAEFrame\fP's delay from the set fps, in seconds\&. 
.PP
\fBReturns\fP
.RS 4
double of the maximum \fBAEFrame\fP's delay in real-world seconds
.RE
.PP

.PP
Definition at line \fB89\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "double AEFrame::getFrameRate (\fBvoid\fP) const\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Returns the fps goal of \fBAEFrame\fP instance\&. 
.PP
\fBReturns\fP
.RS 4
double of the given fps goal
.RE
.PP

.PP
Definition at line \fB83\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "\fBstatic\fP \fBullint\fP \fB__AEModuleBase\fP< \fBAEFrame\fP  >::getModuleAmount (\fBvoid\fP)\fC [inline]\fP, \fC [static]\fP, \fC [noexcept]\fP, \fC [inherited]\fP"

.PP
Returns the amount of instances of the module currently existing\&. 
.PP
\fBReturns\fP
.RS 4
Unsigned long long of the module amount
.RE
.PP

.PP
Definition at line \fB70\fP of file \fBAEModuleBase\&.hpp\fP\&.
.SS "\fBstatic\fP std::string_view \fB__AEModuleBase\fP< \fBAEFrame\fP  >::getModuleName (\fBvoid\fP)\fC [inline]\fP, \fC [static]\fP, \fC [noexcept]\fP, \fC [inherited]\fP"

.PP
Returns the name of the registered module\&. 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.PP
Definition at line \fB78\fP of file \fBAEModuleBase\&.hpp\fP\&.
.SS "\fBvoid\fP AEFrame::resetTimePoint (\fBvoid\fP)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Resets the time point in the \fBAEFrame\fP to current system time\&. Helps if the gameloop delay was much bigger than AEFrames for a long time (it causes delay to stop working untill it catches up) 
.PP
Definition at line \fB75\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "\fBvoid\fP AEFrame::setFps (\fBconst\fP double fps)\fC [inline]\fP, \fC [noexcept]\fP"

.PP
Resets the delay value to what you pass to it\&. 
.PP
\fBNote\fP
.RS 4
if you pass it 0 or negative number it will disable the delay untill a proper value is given
.RE
.PP
\fBParameters\fP
.RS 4
\fIfps\fP The fps goal that the frame delay module will try to achieve
.RE
.PP

.PP
Definition at line \fB48\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "\fBvoid\fP AEFrame::sleep (\fBvoid\fP)\fC [inline]\fP"

.PP
Puts the current thread to sleep up to the set fps goal\&. Example: if the fps goal was set to 30fps (~~33ms) and a game loop takes 13ms, then the thread will sleep the rest of 20ms to make the game loop run at 30fps\&. 
.PP
Definition at line \fB60\fP of file \fBAEFrame\&.hpp\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "bool AEFrame::m_bNoDelay\fC [private]\fP"

.PP
The flag if we don't need the delay, err, for some reason\&. 
.PP
Definition at line \fB99\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "double AEFrame::m_fFPS\fC [private]\fP"

.PP
Definition at line \fB97\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "\fBconst\fP std::string_view \fB__AEModuleBase\fP< \fBAEFrame\fP  >::m_sModulename\fC [static]\fP, \fC [protected]\fP, \fC [inherited]\fP"

.PP
Name of the module (class), same as in code\&. sets up the static variable values for the base class (and inherited classes)
.PP
\fBTodo\fP
.RS 4
Find a way to make it constexpr and compile-time evaluated 
.RE
.PP

.PP
Definition at line \fB88\fP of file \fBAEModuleBase\&.hpp\fP\&.
.SS "\fBtimeDur\fP<double> AEFrame::m_tdChronoDelay\fC [private]\fP"

.PP
The time duration for the delay in sleeps 
.br
 
.PP
Definition at line \fB94\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "\fBtimePoint\fP<\fBSteadyTime\fP, \fBdecltype\fP(\fBm_tdChronoDelay\fP)> AEFrame::m_tpTimepoint\fC [private]\fP"

.PP
The timepoint, that sets time when to wake up the thread\&. 
.PP
Definition at line \fB96\fP of file \fBAEFrame\&.hpp\fP\&.
.SS "std::atomic<\fBullint\fP> \fB__AEModuleBase\fP< \fBAEFrame\fP  >::m_ullModulesAlive\fC [inline]\fP, \fC [static]\fP, \fC [protected]\fP, \fC [inherited]\fP"

.PP
amount of alive module instances 
.PP
Definition at line \fB92\fP of file \fBAEModuleBase\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ArtyK's Console Engine from the source code\&.
