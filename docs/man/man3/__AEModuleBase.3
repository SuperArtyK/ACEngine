.TH "__AEModuleBase< T >" 3 "Thu Mar 14 2024 19:57:53" "Version v0.0.8.5a" "ArtyK's Console Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
__AEModuleBase< T > \- This is a base class for all basic modules, meaning that the module is not using other modules to work\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fR#include <AEModuleBase\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fB__AEModuleBase\fP (void) noexcept"
.br
.RI "Basic constructor that increases module count\&. "
.ti -1c
.RI "\fB__AEModuleBase\fP (const \fB__AEModuleBase\fP< T > &val) noexcept"
.br
.RI "Basic copy constructor that increases module count\&. "
.ti -1c
.RI "virtual \fB~__AEModuleBase\fP (void) noexcept"
.br
.RI "Basic destructor that decreases module count\&. "
.ti -1c
.RI "virtual \fB__AEModuleBase\fP< T > & \fBoperator=\fP (const \fB__AEModuleBase\fP< T > &val)=delete"
.br
.RI "Basic assignment operator -- it does nothing, so it's deleted (make your own) "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBullint\fP \fBgetModuleAmount\fP (void) noexcept"
.br
.RI "Returns the amount of instances of the module currently existing\&. "
.ti -1c
.RI "static constexpr std::string_view \fBgetModuleName\fP (void) noexcept"
.br
.RI "Returns the name of the registered module\&. "
.in -1c
.SS "Static Protected Attributes"

.in +1c
.ti -1c
.RI "static std::atomic< std::size_t > \fBm_ullModulesAlive\fP = 0"
.br
.RI "Amount of alive module instances\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename T>
.br
class __AEModuleBase< T >"This is a base class for all basic modules, meaning that the module is not using other modules to work\&. 


.PP
\fBNote\fP
.RS 4
Intended to be inherited from in class declaration, not direct usage\&. Usage: \fRclass [classname] : public \fB__AEModuleBase\fP<[classname]>\fP 
.RE
.PP
\fBWarning\fP
.RS 4
If you do not include \fBREGISTER_MODULE(T)\fP after the whole class definition (before closing '}'), the program won't compile 
.PP
If you do not include \fBCOPYCONSTRUCT_MODULE(T, val)\fP in the copy-constructor, the module increment (every constructing action) won't work!
.RE
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Inheriting module's class name
.RE
.PP

.PP
Definition at line \fB53\fP of file \fBAEModuleBase\&.hpp\fP\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename T > \fB__AEModuleBase\fP< T >\fB::__AEModuleBase\fP (void)\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Basic constructor that increases module count\&. 
.PP
Definition at line \fB1\fP of file \fBAEModuleBase\&.hpp\fP\&.
.SS "template<typename T > \fB__AEModuleBase\fP< T >\fB::__AEModuleBase\fP (const \fB__AEModuleBase\fP< T > & val)\fR [inline]\fP, \fR [noexcept]\fP"

.PP
Basic copy constructor that increases module count\&. 
.PP
\fBParameters\fP
.RS 4
\fIval\fP The value to be copied\&.\&.\&.useless since we have nothing to copy lol (but we need it)
.RE
.PP

.PP
Definition at line \fB1\fP of file \fBAEModuleBase\&.hpp\fP\&.
.SS "template<typename T > virtual \fB__AEModuleBase\fP< T >::~\fB__AEModuleBase\fP (void)\fR [inline]\fP, \fR [virtual]\fP, \fR [noexcept]\fP"

.PP
Basic destructor that decreases module count\&. 
.PP
Definition at line \fB1\fP of file \fBAEModuleBase\&.hpp\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "template<typename T > virtual \fB__AEModuleBase\fP< T > & \fB__AEModuleBase\fP< T >::operator= (const \fB__AEModuleBase\fP< T > & val)\fR [virtual]\fP, \fR [delete]\fP"

.PP
Basic assignment operator -- it does nothing, so it's deleted (make your own) 
.PP
\fBParameters\fP
.RS 4
\fIval\fP 
.RE
.PP
\fBReturns\fP
.RS 4
.RE
.PP

.SS "template<typename T > static \fBullint\fP \fB__AEModuleBase\fP< T >::getModuleAmount (void)\fR [inline]\fP, \fR [static]\fP, \fR [noexcept]\fP"

.PP
Returns the amount of instances of the module currently existing\&. 
.PP
\fBReturns\fP
.RS 4
Unsigned long long of the module amount
.RE
.PP

.PP
Definition at line \fB91\fP of file \fBAEModuleBase\&.hpp\fP\&.
.PP
References \fB__AEModuleBase< T >::m_ullModulesAlive\fP\&.
.SS "template<typename T > static constexpr std::string_view \fB__AEModuleBase\fP< T >::getModuleName (void)\fR [static]\fP, \fR [constexpr]\fP, \fR [noexcept]\fP"

.PP
Returns the name of the registered module\&. 
.PP
\fBReturns\fP
.RS 4

.RE
.PP

.SH "Member Data Documentation"
.PP 
.SS "template<typename T > std::atomic<std::size_t> \fB__AEModuleBase\fP< T >::m_ullModulesAlive = 0\fR [inline]\fP, \fR [static]\fP, \fR [protected]\fP"

.PP
Amount of alive module instances\&. 
.PP
Definition at line \fB109\fP of file \fBAEModuleBase\&.hpp\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for ArtyK's Console Engine from the source code\&.
