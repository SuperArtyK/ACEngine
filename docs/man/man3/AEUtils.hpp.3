.TH "AEMisc/include/AEUtils.hpp" 3 "Sat Mar 16 2024 12:23:02" "Version v0.0.8.5a" "ArtyK's Console Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AEMisc/include/AEUtils.hpp \- This file contains the engine's \fBusefull utilities for trivial tasks\fP\&.  

.SH SYNOPSIS
.br
.PP
\fR#include 'AEUtilsMacros\&.hpp'\fP
.br
\fR#include 'AEFlags\&.hpp'\fP
.br
\fR#include 'AETypedefs\&.hpp'\fP
.br
\fR#include <algorithm>\fP
.br
\fR#include <string>\fP
.br
\fR#include <cstring>\fP
.br
\fR#include <ctime>\fP
.br
\fR#include <sstream>\fP
.br
\fR#include <iomanip>\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBace\fP"
.br
.RI "This namespace contains \fBeverything that belongs to the engine\fP\&. "
.ti -1c
.RI "namespace \fBace::utils\fP"
.br
.RI "This namespace contains the engine's \fButility functions and code\fP\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "constexpr const std::string_view \fBace::utils::boolToString\fP (const bool b) noexcept"
.br
.RI "Converts \fBbool to string\fP (word versions)\&. "
.ti -1c
.RI "template<typename T , typename Y  = T, typename U  = T> constexpr bool \fBace::utils::isInRange\fP (const T minval, const Y maxval, const U i) noexcept"
.br
.RI "Checks if the \fBvalue is within some range\fP\&. "
.ti -1c
.RI "void \fBace::utils::toLowerRef\fP (std::string &str1)"
.br
.RI "\fBLowers the passed std::string\fP by reference -- transformation is applied directly to the passed string\&. "
.ti -1c
.RI "std::string \fBace::utils::toLowerVal\fP (std::string str1)"
.br
.RI "Returns the \fBlowered version of passed std::string\fP\&. "
.ti -1c
.RI "void \fBace::utils::toUpperRef\fP (std::string &str1)"
.br
.RI "\fBUppers the passed std::string\fP by reference\&. "
.ti -1c
.RI "std::string \fBace::utils::toUpperVal\fP (std::string str1)"
.br
.RI "Returns the \fBuppered version of passed std::string\fP\&. "
.ti -1c
.RI "template<const bool checkFloat = true> constexpr bool \fBace::utils::isNum\fP (const std::string_view strnum) noexcept"
.br
.RI "Checks if the given \fBstring is a numerical value\fP\&. "
.ti -1c
.RI "std::string \fBace::utils::formatDate\fP (const std::time_t timept)"
.br
.RI "Formats the current **(c)time point as YYYY-MM-DD\&.HH:mm:SS string**\&. "
.ti -1c
.RI "char * \fBace::utils::formatDate\fP (const std::time_t timept, char *const str) noexcept"
.br
.RI "Formats the current **(c)time point as YYYY-MM-DD\&.HH:mm:SS c-string**\&. "
.ti -1c
.RI "std::string \fBace::utils::getCurrentDate\fP (void)"
.br
.RI "Formats the \fBcurrent date and time as YYYY-MM-DD\&.HH:mm:SS\fP\&. "
.ti -1c
.RI "std::time_t \fBace::utils::stringToDate\fP (const char *const timestr, const char *const timeformat='%Y\-%m\-%d\&.%X')"
.br
.RI "Converts the given c-string to a (c)time point (std::time_t), using a set format\&. "
.ti -1c
.RI "std::string \fBace::utils::addrToStr\fP (const void *const myptr, const bool add0x=true) noexcept"
.br
.RI "Converts the \fBhex address value to std::string\fP\&. "
.ti -1c
.RI "void \fBace::utils::sleepMS\fP (const int ms) noexcept"
.br
.RI "Convenient sleep function to \fBsleep the thread for milliseconds\fP\&. "
.ti -1c
.RI "void \fBace::utils::sleepUS\fP (const int us) noexcept"
.br
.RI "Convenient sleep function to \fBsleep the thread for microseconds\fP\&. "
.ti -1c
.RI "std::FILE * \fBace::utils::fopenCC\fP (const char *const fname, const char *const flags) noexcept"
.br
.RI "A wrapper to make the proper \fBcross-compiler version of fopen()\fP Opens the file with given name and flags\&. "
.ti -1c
.RI "template<typename T  = int> 
.br
requires (std::is_integral<T>::value)constexpr T \fBace::utils::numCharToInt\fP (const char c) noexcept"
.br
.RI "Converts the given \fBnumeric char to int of type T\fP "
.ti -1c
.RI "template<typename T  = int> constexpr char \fBace::utils::intToNumChar\fP (const T i) noexcept"
.br
.RI "Converts the given \fBint of type T to numeric char\fP "
.ti -1c
.RI "constexpr bool \fBace::utils::isAlNum\fP (const std::string_view str)"
.br
.RI "Checks \fBif the passed string is alpha-numeric\fP (contains only numbers and english letters) "
.ti -1c
.RI "constexpr bool \fBace::utils::isAlNumUs\fP (const std::string_view str)"
.br
.RI "Checks \fBif the passed string is alpha-numeric with underscores\fP (contains only numbers, english letters, and underscores) "
.in -1c
.SH "Detailed Description"
.PP 
This file contains the engine's \fBusefull utilities for trivial tasks\fP\&. 

Stuff that I found that I needed to implement to perform some task, 
.br
 like bool to 'true'/'false' string, thought the engine would benefit from by making it 
.br
 an engine-wide utility\&.
.PP
Less copy-pasted code, yayyy\&.
.PP
\fBDate\fP
.RS 4
2023/09/22
.RE
.PP
\fBAuthor\fP
.RS 4
Artemii Kozhemiak (SuperArtyK)
.RE
.PP
\fBCopyright\fP
.RS 4
MIT License
.RE
.PP
\fIShould not cause everything to break :)\fP 
.PP
Definition in file \fBAEUtils\&.hpp\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for ArtyK's Console Engine from the source code\&.
