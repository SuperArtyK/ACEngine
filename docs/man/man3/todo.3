.TH "todo" 3 "Thu Mar 14 2024 19:57:53" "Version v0.0.8.5a" "ArtyK's Console Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
todo \- Todo List 
.PP

.IP "\fBMember \fBace::math::sqrt\fP (const T num) noexcept\fP" 1c
When C++23 support appears, add if-consteval to use the newton's method in constexpr context, and use classic std::sqrt otherwise  
.IP "\fBClass \fBAEFileReader\fP \fP" 1c
add generic read function  
.IP "\fBMember \fBAEFileWriter::write\fP (const T &var, const size_t datasz=0, const bool useAutoFlush=AEFW_DEFAULT_AUTOFLUSH) noexcept\fP" 1c
Add a way to add custom types to this generic write function\&.  
.IP "\fBMember \fBAEFileWriter::writeFloat\fP (const T num, const bool useAutoFlush=AEFW_DEFAULT_AUTOFLUSH) noexcept\fP" 1c
Add custom way to format the float number  
.IP "\fBClass \fBAELogger\fP \fP" 1c
Implement copy constructors and copy assignment 
.PP
.PP
Add the ability to open the same log file/redirect the instance requests to the one that has it open first\&. 
.PP
.IP "\fBMember \fBAELogger::writeToLog\fP (const std::string_view logmessg, const cint logtype=AELOG_TYPE_INFO, const std::string_view logmodule=AELOG_DEFAULT_MODULE_NAME, const std::time_t logTime=0)\fP" 1c
Implement decrease in log queue size\&.\&.\&.somehow  
.IP "\fBMember \fBAELogParser::filterQueue\fP (\fBAELogEntry\fP *&ptr, const cint severity, const bool strictSeverity, const std::string_view mname, const bool reallocQueue=true)\fP" 1c
Implement a container for the queue to prevent this from happening  
.IP "\fBMember \fBAELogParser::filterQueueName\fP (\fBAELogEntry\fP *&ptr, const std::string_view mname, const bool reallocQueue=true)\fP" 1c
Implement a container for the queue to prevent this from happening  
.IP "\fBMember \fBAELogParser::filterQueueType\fP (\fBAELogEntry\fP *&ptr, const cint severity, const bool strictSeverity=false, const bool reallocQueue=true)\fP" 1c
Implement a container for the queue to prevent this from happening  
.IP "\fBFile \fBAETrigLookup\&.hpp\fP \fP" 1c
Add the ability to calculate the tables at compile time + control the size (36 elements or 3600, etc) Maybe it's a future (c++26) thing 
.IP "\fBMember \fBAEVector< T, dimAmount, >::angleBetweenDeg\fP (const AEVector< Y, dimAmount > &two) const noexcept\fP" 1c
Change this function to constexpr once the constexpr solution appears  
.IP "\fBMember \fBAEVector< T, dimAmount, >::angleBetweenRad\fP (const AEVector< Y, dimAmount > &two) const noexcept\fP" 1c
Change this function to constexpr once the constexpr solution appears 
.PP

