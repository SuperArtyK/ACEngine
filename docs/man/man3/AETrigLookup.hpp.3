.TH "AEMisc/include/AETrigLookup.hpp" 3 "Sat Mar 16 2024 11:28:29" "Version v0.0.8.5a" "ArtyK's Console Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AEMisc/include/AETrigLookup.hpp \- This file contains the engine's \fBtrigonometric function lookup tables\fP\&.  

.SH SYNOPSIS
.br
.PP
\fR#include 'AEFlags\&.hpp'\fP
.br
\fR#include 'AEMath\&.hpp'\fP
.br
\fR#include <cfloat>\fP
.br

.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBace\fP"
.br
.RI "This namespace contains \fBeverything that belongs to the engine\fP\&. "
.ti -1c
.RI "namespace \fBace::math\fP"
.br
.RI "This namespace contains the engine's \fBmath and math-related functions\fP\&. "
.ti -1c
.RI "namespace \fBace::math::lookup\fP"
.br
.RI "This namespace contains the engine's \fBmath lookup functions\fP\&. "
.ti -1c
.RI "namespace \fBace::math::lookup::_tables\fP"
.br
.RI "This namespace contains the engine's \fBlookup tables\fP "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBAETRIG_TABLE_SIZE\fP   360"
.br
.RI "A macro for the size of the trigonometric function lookup tables\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "constexpr std::size_t \fBace::math::lookup::_getTrigTableIndex\fP (const \fBllint\fP a) noexcept"
.br
.RI "Returns the \fBindex to the trig table\fP from the given (int) degree number\&. "
.ti -1c
.RI "constexpr float \fBace::math::lookup::sinDeg_table\fP (const float degrees) noexcept"
.br
.RI "Rounds the degrees value, and \fBlooks up the value of sine\fP in the table\&. "
.ti -1c
.RI "constexpr float \fBace::math::lookup::cosDeg_table\fP (const float degrees) noexcept"
.br
.RI "Rounds the degrees value, and \fBlooks up the value of cosine\fP in the table\&. "
.ti -1c
.RI "constexpr float \fBace::math::lookup::tanDeg_table\fP (const float degrees) noexcept"
.br
.RI "Rounds the degrees value, and \fBlooks up the value of tangent\fP in the table\&. "
.ti -1c
.RI "constexpr float \fBace::math::lookup::cotDeg_table\fP (const float degrees) noexcept"
.br
.RI "Rounds the degrees value, and \fBlooks up the value of cotangent\fP in the table\&. "
.ti -1c
.RI "constexpr float \fBace::math::lookup::cscDeg_table\fP (const float degrees) noexcept"
.br
.RI "Rounds the degrees value, and \fBlooks up the value of cosecant\fP in the table\&. "
.ti -1c
.RI "constexpr float \fBace::math::lookup::secDeg_table\fP (const float degrees) noexcept"
.br
.RI "Rounds the degrees value, and \fBlooks up the value of secant\fP in the table\&. "
.ti -1c
.RI "constexpr float \fBace::math::lookup::sinDeg_tableInterp\fP (const float degrees) noexcept"
.br
.RI "Calculates the \fBinterpolated sine value\fP from the sine lookup table\&. "
.ti -1c
.RI "constexpr float \fBace::math::lookup::cosDeg_tableInterp\fP (const float degrees) noexcept"
.br
.RI "Calculates the \fBinterpolated cosine value\fP from the cosine lookup table\&. "
.ti -1c
.RI "constexpr float \fBace::math::lookup::tanDeg_tableInterp\fP (const float degrees) noexcept"
.br
.RI "Calculates the \fBinterpolated tangent value\fP from the tangent lookup table\&. "
.ti -1c
.RI "constexpr float \fBace::math::lookup::cotDeg_tableInterp\fP (const float degrees) noexcept"
.br
.RI "Calculates the \fBinterpolated cotangent value\fP from the cotangent lookup table\&. "
.ti -1c
.RI "constexpr float \fBace::math::lookup::cscDeg_tableInterp\fP (const float degrees) noexcept"
.br
.RI "Approximates the \fBinterpolated cosecant value\fP from the cosecant lookup table\&. "
.ti -1c
.RI "constexpr float \fBace::math::lookup::secDeg_tableInterp\fP (const float degrees) noexcept"
.br
.RI "Calculates the \fBinterpolated secant value\fP from the secant lookup table\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "constexpr float \fBace::math::lookup::_tables::sinTable\fP [360]"
.br
.RI "A lookup table for sine values (degrees) "
.ti -1c
.RI "constexpr float \fBace::math::lookup::_tables::cosTable\fP [360]"
.br
.RI "A lookup table for cosine values (degrees) "
.ti -1c
.RI "constexpr float \fBace::math::lookup::_tables::tanTable\fP [360]"
.br
.RI "A lookup table for tangent values (degrees) "
.ti -1c
.RI "constexpr float \fBace::math::lookup::_tables::cotTable\fP [360]"
.br
.RI "A lookup table for cotangent values (degrees) "
.ti -1c
.RI "constexpr float \fBace::math::lookup::_tables::cscTable\fP [360]"
.br
.RI "A lookup table for cosecant values (degrees) "
.ti -1c
.RI "constexpr float \fBace::math::lookup::_tables::secTable\fP [360]"
.br
.RI "A lookup table for secant values (degrees) "
.in -1c
.SH "Detailed Description"
.PP 
This file contains the engine's \fBtrigonometric function lookup tables\fP\&. 

These will be insanely fast, since it's almost just an array lookup (ignoring the rounding and casting passed floats to int)
.PP
But since this is a lookup table:
.IP "\(bu" 2
It won't be as precise -- error within 1 degree (or even less, with the interpolated functions)
.IP "\(bu" 2
It can increase compile time of the project
.IP "\(bu" 2
Also it can put a strain on cache and increase misses
.IP "\(bu" 2
It can increase memory usage (will be true whenever the lookup table size ever becomes custom-controlled)
.PP
.PP
Set \fBENGINE_ENABLE_MATH_LOOKUP\fP to completely disable this and effectively not include this file\&.
.PP
\fBTodo\fP
.RS 4
Add the ability to calculate the tables at compile time + control the size (36 elements or 3600, etc) Maybe it's a future (c++26) thing
.RE
.PP
.PP
\fBDate\fP
.RS 4
2023-2024
.RE
.PP
\fBAuthor\fP
.RS 4
Artemii Kozhemiak (SuperArtyK)
.RE
.PP
\fBCopyright\fP
.RS 4
MIT License
.RE
.PP
\fIShould not cause everything to break :)\fP 
.PP
Definition in file \fBAETrigLookup\&.hpp\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define AETRIG_TABLE_SIZE   360"

.PP
A macro for the size of the trigonometric function lookup tables\&. 
.PP
\fBNote\fP
.RS 4
For now - do not touch! 
.RE
.PP

.PP
Definition at line \fB40\fP of file \fBAETrigLookup\&.hpp\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for ArtyK's Console Engine from the source code\&.
