.TH "AEMisc/include/AETypedefs.hpp" 3 "Sat Mar 16 2024 12:23:02" "Version v0.0.8.5a" "ArtyK's Console Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AEMisc/include/AETypedefs.hpp \- This file contains the engine's \fBtypedefs and variable type aliases\fP\&.  

.SH SYNOPSIS
.br
.PP
\fR#include <climits>\fP
.br
\fR#include <chrono>\fP
.br
\fR#include <thread>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBUCINT_MAX\fP   UCHAR_MAX"
.br
.RI "Macro for the \fBmaximum value of the \fBucint\fP\fP type\&. "
.ti -1c
.RI "#define \fBUCINT_MIN\fP   0"
.br
.RI "Macro for the \fBminimum value of the \fBucint\fP\fP type\&. "
.ti -1c
.RI "#define \fBCINT_MAX\fP   SCHAR_MAX"
.br
.RI "Macro for the \fBmaximum value of the \fBcint\fP\fP type\&. "
.ti -1c
.RI "#define \fBCINT_MIN\fP   SCHAR_MIN"
.br
.RI "Macro for the \fBminimum value of the \fBcint\fP\fP type\&. "
.ti -1c
.RI "#define \fBULLINT_MAX\fP   ULLONG_MAX"
.br
.RI "Macro for the \fBmaximum value of the \fBullint\fP\fP type\&. "
.ti -1c
.RI "#define \fBULLINT_MIN\fP   0"
.br
.RI "Macro for the \fBminimum value of the \fBullint\fP\fP type\&. "
.ti -1c
.RI "#define \fBLLINT_MAX\fP   LLONG_MAX"
.br
.RI "Macro for the \fBmaximum value of the \fBllint\fP\fP type\&. "
.ti -1c
.RI "#define \fBLLINT_MIN\fP   LLONG_MIN"
.br
.RI "Macro for the \fBminimum value of the \fBllint\fP\fP type\&. "
.ti -1c
.RI "#define \fBSINT_MAX\fP   INT_MAX"
.br
.RI "Macro for the \fBmaximum value of the \fBsint\fP\fP type\&. "
.ti -1c
.RI "#define \fBSINT_MIN\fP   INT_MIN"
.br
.RI "Macro for the \fBminimum value of the \fBsint\fP\fP type\&. "
.ti -1c
.RI "#define \fBUINT_MIN\fP   0"
.br
.RI "Macro for the \fBminimum value of the \fBuint\fP\fP type\&. "
.ti -1c
.RI "#define \fBUSHRT_MIN\fP   0"
.br
.RI "Macro for the \fBminimum value of the \fBushort\fP\fP type\&. "
.ti -1c
.RI "#define \fBSSHRT_MAX\fP   SHRT_MAX"
.br
.RI "Macro for the \fBmaximum value of the \fBsshort\fP\fP type\&. "
.ti -1c
.RI "#define \fBSSHRT_MIN\fP   SHRT_MIN"
.br
.RI "Macro for the \fBminimum value of the \fBsshort\fP\fP type\&. "
.ti -1c
.RI "#define \fBAENULL\fP   0"
.br
.RI "Macro for the \fBNULL value as a 0\fP, not a pointer\&. "
.ti -1c
.RI "#define \fBgetSysTime\fP()   SysClock::now()"
.br
.RI "A macro to get the \fBsystem clock's current time\fP (now()) "
.ti -1c
.RI "#define \fBgetHighResTime\fP()   HighResClock::now()"
.br
.RI "A macro to get the \fBhigh resolution clock's current time\fP (now()) "
.ti -1c
.RI "#define \fBgetSteadyTime\fP()   SteadyClock::now()"
.br
.RI "A macro to get the \fBsteady clock's current time\fP (now()) "
.ti -1c
.RI "#define \fBmilliSec\fP(ms)   std::chrono::milliseconds(ms)"
.br
.RI "A macro as the shortcut of \fBchrono's milliseconds\fP\&. "
.ti -1c
.RI "#define \fBmicroSec\fP(us)   std::chrono::microseconds(us)"
.br
.RI "A macro as the shortcut of \fBchrono's microseconds\fP\&. "
.ti -1c
.RI "#define \fBcalculateTime\fP(tp1,  tp2,  type)   std::chrono::duration<type>(tp2 \- tp1)\&.count()"
.br
.RI "A macro to \fBcalculate time between 2 timepoints\fP as some type\&. "
.ti -1c
.RI "#define \fBsleepUntil\fP(sec)   std::this_thread::sleep_until(sec)"
.br
.RI "A macro as the shortcut of \fBthread's sleep_until\fP 
.PP
\fBParameters\fP
.RS 4
\fIsec\fP The chronos's duration object (milliseconds, seconds, etc)
.RE
.PP
"
.ti -1c
.RI "#define \fBsleepFor\fP(sec)   std::this_thread::sleep_for(sec)"
.br
.RI "A macro as the shortcut of \fBthread's sleep_for\fP 
.PP
\fBParameters\fP
.RS 4
\fIsec\fP The chronos's duration object (milliseconds, seconds, etc)
.RE
.PP
"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef uint8_t \fBucint\fP"
.br
.RI "A shortcut for an integer of the \fBunsigned char\fP type (8 bits)\&. "
.ti -1c
.RI "typedef int8_t \fBcint\fP"
.br
.RI "A shortcut for an integer of the \fBsigned char\fP type (8 bits)\&. "
.ti -1c
.RI "typedef unsigned long long \fBullint\fP"
.br
.RI "A shortcut for an integer of the \fBunsigned long long int\fP type (64 bits)\&. "
.ti -1c
.RI "typedef long long \fBllint\fP"
.br
.RI "A shortcut for an integer of the \fBlong long int\fP type (64 bits)\&. "
.ti -1c
.RI "typedef signed int \fBsint\fP"
.br
.RI "A shortcut for a just \fBsigned int\fP (32 bits) "
.ti -1c
.RI "typedef unsigned int \fBuint\fP"
.br
.RI "A shortcut for an integer of the \fBunsigned int\fP (32 bits) "
.ti -1c
.RI "typedef unsigned short \fBushort\fP"
.br
.RI "A shortcut for an integer of the just \fBunsigned short\fP type (16 bits) "
.ti -1c
.RI "typedef signed short \fBsshort\fP"
.br
.RI "A shortcut for a just \fBsigned short\fP (16 bits) "
.ti -1c
.RI "typedef std::chrono::system_clock \fBSysClock\fP"
.br
.RI "A shortcut for \fBchrono's system clock\fP "
.ti -1c
.RI "typedef std::chrono::high_resolution_clock \fBHighResClock\fP"
.br
.RI "A shortcut for \fBchrono's high resolution clock\fP "
.ti -1c
.RI "typedef std::chrono::steady_clock \fBSteadyClock\fP"
.br
.RI "A shortcut for \fBchrono's steady clock\fP "
.ti -1c
.RI "template<class Clock , class Duration  = typename Clock::duration> using \fBtimePoint\fP = std::chrono::time_point<Clock, Duration>"
.br
.RI "An alias for the \fBstd::chrono::time_point\fP to not type\&.\&.\&.as much\&. "
.ti -1c
.RI "template<class ticksType , class Period  = std::ratio<1>> using \fBtimeDur\fP = std::chrono::duration<ticksType, Period>"
.br
.RI "An alias for the \fBstd::chrono::duration\fP to not type as much\&. "
.in -1c
.SH "Detailed Description"
.PP 
This file contains the engine's \fBtypedefs and variable type aliases\fP\&. 

The reason for this is that they are long or inconvenient to type\&.
.PP
So -- shorter names for easier coding\&.
.PP
\fBDate\fP
.RS 4
2023/09/21
.RE
.PP
\fBAuthor\fP
.RS 4
Artemii Kozhemiak (SuperArtyK)
.RE
.PP
\fBCopyright\fP
.RS 4
MIT License
.RE
.PP
\fIShould not cause everything to break :)\fP 
.PP
Definition in file \fBAETypedefs\&.hpp\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#define UCINT_MAX   UCHAR_MAX"

.PP
Macro for the \fBmaximum value of the \fBucint\fP\fP type\&. 
.PP
Definition at line \fB61\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define UCINT_MIN   0"

.PP
Macro for the \fBminimum value of the \fBucint\fP\fP type\&. 
.PP
Definition at line \fB64\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define CINT_MAX   SCHAR_MAX"

.PP
Macro for the \fBmaximum value of the \fBcint\fP\fP type\&. 
.PP
Definition at line \fB67\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define CINT_MIN   SCHAR_MIN"

.PP
Macro for the \fBminimum value of the \fBcint\fP\fP type\&. 
.PP
Definition at line \fB70\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define ULLINT_MAX   ULLONG_MAX"

.PP
Macro for the \fBmaximum value of the \fBullint\fP\fP type\&. 
.PP
Definition at line \fB73\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define ULLINT_MIN   0"

.PP
Macro for the \fBminimum value of the \fBullint\fP\fP type\&. 
.PP
Definition at line \fB76\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define LLINT_MAX   LLONG_MAX"

.PP
Macro for the \fBmaximum value of the \fBllint\fP\fP type\&. 
.PP
Definition at line \fB79\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define LLINT_MIN   LLONG_MIN"

.PP
Macro for the \fBminimum value of the \fBllint\fP\fP type\&. 
.PP
Definition at line \fB82\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define SINT_MAX   INT_MAX"

.PP
Macro for the \fBmaximum value of the \fBsint\fP\fP type\&. 
.PP
Definition at line \fB85\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define SINT_MIN   INT_MIN"

.PP
Macro for the \fBminimum value of the \fBsint\fP\fP type\&. 
.PP
Definition at line \fB88\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define UINT_MIN   0"

.PP
Macro for the \fBminimum value of the \fBuint\fP\fP type\&. 
.PP
Definition at line \fB92\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define USHRT_MIN   0"

.PP
Macro for the \fBminimum value of the \fBushort\fP\fP type\&. 
.PP
Definition at line \fB96\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define SSHRT_MAX   SHRT_MAX"

.PP
Macro for the \fBmaximum value of the \fBsshort\fP\fP type\&. 
.PP
Definition at line \fB99\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define SSHRT_MIN   SHRT_MIN"

.PP
Macro for the \fBminimum value of the \fBsshort\fP\fP type\&. 
.PP
Definition at line \fB102\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define AENULL   0"

.PP
Macro for the \fBNULL value as a 0\fP, not a pointer\&. 
.PP
Definition at line \fB106\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define getSysTime()   SysClock::now()"

.PP
A macro to get the \fBsystem clock's current time\fP (now()) 
.PP
Definition at line \fB121\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define getHighResTime()   HighResClock::now()"

.PP
A macro to get the \fBhigh resolution clock's current time\fP (now()) 
.PP
Definition at line \fB124\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define getSteadyTime()   SteadyClock::now()"

.PP
A macro to get the \fBsteady clock's current time\fP (now()) 
.PP
Definition at line \fB127\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define milliSec(ms)   std::chrono::milliseconds(ms)"

.PP
A macro as the shortcut of \fBchrono's milliseconds\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIms\fP The number of milliseconds to convert to
.RE
.PP

.PP
Definition at line \fB149\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define microSec(us)   std::chrono::microseconds(us)"

.PP
A macro as the shortcut of \fBchrono's microseconds\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIus\fP The number of microseconds to convert to
.RE
.PP

.PP
Definition at line \fB153\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define calculateTime(tp1, tp2, type)   std::chrono::duration<type>(tp2 \- tp1)\&.count()"

.PP
A macro to \fBcalculate time between 2 timepoints\fP as some type\&. 
.PP
\fBParameters\fP
.RS 4
\fItp1\fP The first, starting point of time (time point)
.br
\fItp2\fP The second, starting point of time (time point)
.br
\fItype\fP The type of the resulting operation
.RE
.PP

.PP
Definition at line \fB159\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define sleepUntil(sec)   std::this_thread::sleep_until(sec)"

.PP
A macro as the shortcut of \fBthread's sleep_until\fP 
.PP
\fBParameters\fP
.RS 4
\fIsec\fP The chronos's duration object (milliseconds, seconds, etc)
.RE
.PP

.PP
Definition at line \fB165\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "#define sleepFor(sec)   std::this_thread::sleep_for(sec)"

.PP
A macro as the shortcut of \fBthread's sleep_for\fP 
.PP
\fBParameters\fP
.RS 4
\fIsec\fP The chronos's duration object (milliseconds, seconds, etc)
.RE
.PP

.PP
Definition at line \fB169\fP of file \fBAETypedefs\&.hpp\fP\&.
.SH "Typedef Documentation"
.PP 
.SS "typedef uint8_t \fBucint\fP"

.PP
A shortcut for an integer of the \fBunsigned char\fP type (8 bits)\&. 
.PP
Definition at line \fB32\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "typedef int8_t \fBcint\fP"

.PP
A shortcut for an integer of the \fBsigned char\fP type (8 bits)\&. 
.PP
Definition at line \fB35\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "typedef unsigned long long \fBullint\fP"

.PP
A shortcut for an integer of the \fBunsigned long long int\fP type (64 bits)\&. 
.PP
Definition at line \fB38\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "typedef long long \fBllint\fP"

.PP
A shortcut for an integer of the \fBlong long int\fP type (64 bits)\&. 
.PP
Definition at line \fB41\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "typedef signed int \fBsint\fP"

.PP
A shortcut for a just \fBsigned int\fP (32 bits) 
.PP
\fBRemarks\fP
.RS 4
I don't know if you'd ever use this, but it's there, for completion\&. 
.RE
.PP

.PP
Definition at line \fB45\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "typedef unsigned int \fBuint\fP"

.PP
A shortcut for an integer of the \fBunsigned int\fP (32 bits) 
.PP
Definition at line \fB48\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "typedef unsigned short \fBushort\fP"

.PP
A shortcut for an integer of the just \fBunsigned short\fP type (16 bits) 
.PP
Definition at line \fB51\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "typedef signed short \fBsshort\fP"

.PP
A shortcut for a just \fBsigned short\fP (16 bits) 
.PP
\fBNote\fP
.RS 4
I don't know if you'd ever use this, but it's there, for completion\&. 
.RE
.PP

.PP
Definition at line \fB55\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "typedef std::chrono::system_clock \fBSysClock\fP"

.PP
A shortcut for \fBchrono's system clock\fP 
.PP
Definition at line \fB111\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "typedef std::chrono::high_resolution_clock \fBHighResClock\fP"

.PP
A shortcut for \fBchrono's high resolution clock\fP 
.PP
Definition at line \fB114\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "typedef std::chrono::steady_clock \fBSteadyClock\fP"

.PP
A shortcut for \fBchrono's steady clock\fP 
.PP
Definition at line \fB117\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "template<class Clock , class Duration  = typename Clock::duration> using \fBtimePoint\fP = std::chrono::time_point<Clock, Duration>"

.PP
An alias for the \fBstd::chrono::time_point\fP to not type\&.\&.\&.as much\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIClock\fP The clock (system, hi-res, steady) on which this time point is measured
.br
\fIDuration\fP a std::chrono::duration type used to measure the time since epoch
.RE
.PP

.PP
Definition at line \fB136\fP of file \fBAETypedefs\&.hpp\fP\&.
.SS "template<class ticksType , class Period  = std::ratio<1>> using \fBtimeDur\fP = std::chrono::duration<ticksType, Period>"

.PP
An alias for the \fBstd::chrono::duration\fP to not type as much\&. 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIticksType\fP An arithmetic type representing the number of ticks
.br
\fIPeriod\fP A std::ratio representing the tick period (i\&.e\&. the number of second's fractions per tick)
.RE
.PP

.PP
Definition at line \fB144\fP of file \fBAETypedefs\&.hpp\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for ArtyK's Console Engine from the source code\&.
