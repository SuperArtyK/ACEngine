.TH "AEMisc/include/AEMathConst.hpp" 3 "Sat Mar 16 2024 11:28:29" "Version v0.0.8.5a" "ArtyK's Console Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AEMisc/include/AEMathConst.hpp
.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI "namespace \fBace\fP"
.br
.RI "This namespace contains \fBeverything that belongs to the engine\fP\&. "
.ti -1c
.RI "namespace \fBace::math\fP"
.br
.RI "This namespace contains the engine's \fBmath and math-related functions\fP\&. "
.ti -1c
.RI "namespace \fBace::math::cst\fP"
.br
.RI "This namespace contains the engine's \fBmath constants\fP\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::pi\fP (void) noexcept"
.br
.RI "Engine's \fBpi\fP value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::tau\fP (void) noexcept"
.br
.RI "Engine's \fBtau (pi*2)\fP value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::piDouble\fP (void) noexcept"
.br
.RI "Engine's \fBpi*2\fP (tau) value Just another name for ace::math::tau() "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::piHalf\fP (void) noexcept"
.br
.RI "Engine's \fBpi/2\fP (half) value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::piQuarter\fP (void) noexcept"
.br
.RI "Engine's \fBpi/4\fP (quarter) value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::piSquared\fP (void) noexcept"
.br
.RI "Engine's \fBpi^2\fP (squared) value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::piInv\fP (void) noexcept"
.br
.RI "Engine's \fB1/pi\fP (inverse) value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::log2e\fP (void) noexcept"
.br
.RI "Engine's \fBlog2(e)\fP value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::log10e\fP (void) noexcept"
.br
.RI "Engine's \fBlog10(e)\fP value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::ln2\fP (void) noexcept"
.br
.RI "Engine's \fBln(2)\fP value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::ln10\fP (void) noexcept"
.br
.RI "Engine's \fBln(10)\fP value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::sqrtOf2\fP (void) noexcept"
.br
.RI "Engine's \fBsqrt(2)\fP value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::sqrtOf3\fP (void) noexcept"
.br
.RI "Engine's \fBsqrt(3)\fP value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::sqrtOf2Inv\fP (void) noexcept"
.br
.RI "Engine's \fB1/sqrt(2)\fP value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::sqrtOf3Inv\fP (void) noexcept"
.br
.RI "Engine's \fB1/sqrt(3)\fP value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::sqrtOfPi\fP (void) noexcept"
.br
.RI "Engine's \fBsqrt(pi)\fP value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::sqrtOfPiInv\fP (void) noexcept"
.br
.RI "Engine's \fB1/sqrt(pi)\fP value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::e\fP (void) noexcept"
.br
.RI "Engine's \fBeuler's number\fP value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::eGamma\fP (void) noexcept"
.br
.RI "Engine's \fBeuler's gamma function\fP (euler's constant) value\&. "
.ti -1c
.RI "template<typename T  = long double> constexpr T \fBace::math::cst::phi\fP (void) noexcept"
.br
.RI "Engine's \fBgolden ratio\fP (phi) value\&. "
.in -1c
.SH "Author"
.PP 
Generated automatically by Doxygen for ArtyK's Console Engine from the source code\&.
