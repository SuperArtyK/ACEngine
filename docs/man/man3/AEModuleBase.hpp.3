.TH "AEModuleBase/include/AEModuleBase.hpp" 3 "Fri Feb 2 2024 00:44:14" "Version v0.0.8.5a" "ArtyK's Console Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AEModuleBase/include/AEModuleBase.hpp
.SH SYNOPSIS
.br
.PP
\fC#include 'include/AETypedefs\&.hpp'\fP
.br
\fC#include 'include/AEFlags\&.hpp'\fP
.br
\fC#include <atomic>\fP
.br
\fC#include <string>\fP
.br
\fC#include <string_view>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fB__AEModuleBase< T >\fP"
.br
.RI "This is a base class for all basic modules, meaning that the module is not using other modules to work\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#\fBdefine\fP \fBREGISTER_MODULE\fP(T)"
.br
.RI "A process to register the module (that inherited from \fB__AEModuleBase\fP) (under the hood: finish specialising \fB__AEModuleBase::getModuleName()\fP specially for the inheriting class) Usage: Always put it as the \fBlast\fP entry to the class, before the closing brace }\&. "
.ti -1c
.RI "#\fBdefine\fP \fBCOPYCONSTRUCT_MODULE\fP(T,  \fBval\fP)   \fB__AEModuleBase\fP<T>(\fBval\fP)"
.br
.RI "A process to correctly copy-construct the module (that inherited from \fB__AEModuleBase\fP) (under the hood: calls the copy-constructor of the \fB__AEModuleBase\fP) Usage: put it as the first item of the initializer list Example: \fBTestClass(const TestClass& val)\fP : \fBCOPYCONSTRUCT_MODULE(T, val)\fP, [other member initialisation] {\&.\&.\&.}\&. "
.ti -1c
.RI "#\fBdefine\fP \fBENGINE_MODULE_ERR_NOERROR\fP   0"
.br
.RI "Global 'no error' return flag for all engine modules\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBconstexpr\fP std::string_view \fBgetModuleName2\fP (\fBvoid\fP) \fBnoexcept\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
This file contains the code for the module that all (utility) modules base on in the ArtyK's Console Engine class\&.
.PP
Should not cause everything to break :) 
.PP
Definition in file \fBAEModuleBase\&.hpp\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#\fBdefine\fP COPYCONSTRUCT_MODULE(T, \fBval\fP)   \fB__AEModuleBase\fP<T>(\fBval\fP)"

.PP
A process to correctly copy-construct the module (that inherited from \fB__AEModuleBase\fP) (under the hood: calls the copy-constructor of the \fB__AEModuleBase\fP) Usage: put it as the first item of the initializer list Example: \fBTestClass(const TestClass& val)\fP : \fBCOPYCONSTRUCT_MODULE(T, val)\fP, [other member initialisation] {\&.\&.\&.}\&. 
.PP
\fBWarning\fP
.RS 4
If you won't do it, the module count (done by \fB__AEModuleBase\fP) won't be incremented 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Inheriting module's class name
.br
\fIval\fP The name of the argument to be copy-constructed from
.RE
.PP
.RE
.PP

.PP
Definition at line \fB35\fP of file \fBAEModuleBase\&.hpp\fP\&.
.SS "#\fBdefine\fP ENGINE_MODULE_ERR_NOERROR   0"

.PP
Global 'no error' return flag for all engine modules\&. 
.PP
Definition at line \fB38\fP of file \fBAEModuleBase\&.hpp\fP\&.
.SS "#\fBdefine\fP REGISTER_MODULE(T)"
\fBValue:\fP.PP
.nf
    public: static constexpr std::string_view getModuleName(void) noexcept { \\
	static_assert(sizeof(#T) <= AELE_MODULENAME_SIZE, "The module name is TOO BIG! (check AELE_MODULENAME_SIZE in AEMisc/include/AEFlags\&.hpp"); \\
    return #T; }
.fi

.PP
A process to register the module (that inherited from \fB__AEModuleBase\fP) (under the hood: finish specialising \fB__AEModuleBase::getModuleName()\fP specially for the inheriting class) Usage: Always put it as the \fBlast\fP entry to the class, before the closing brace }\&. 
.PP
\fBWarning\fP
.RS 4
If you won't do it, the project won't compile with the 'unresolved external' error 
.PP
\fBTemplate Parameters\fP
.RS 4
\fIT\fP Inheriting module's class name
.RE
.PP
.RE
.PP

.PP
Definition at line \fB24\fP of file \fBAEModuleBase\&.hpp\fP\&.
.SH "Function Documentation"
.PP 
.SS "\fBconstexpr\fP std::string_view getModuleName2 (\fBvoid\fP)\fC [constexpr]\fP, \fC [noexcept]\fP"

.PP
Definition at line \fB103\fP of file \fBAEModuleBase\&.hpp\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for ArtyK's Console Engine from the source code\&.
