.TH "AEFileReader/include/AEFileReader.hpp" 3 "Fri Feb 2 2024 00:44:14" "Version v0.0.8.5a" "ArtyK's Console Engine" \" -*- nroff -*-
.ad l
.nh
.SH NAME
AEFileReader/include/AEFileReader.hpp
.SH SYNOPSIS
.br
.PP
\fC#include 'include/AEModuleBase\&.hpp'\fP
.br
\fC#include 'include/AEUtils\&.hpp'\fP
.br
\fC#include <atomic>\fP
.br
\fC#include <filesystem>\fP
.br
\fC#include <string>\fP
.br
\fC#include <string_view>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <cstdio>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBAEFileReader\fP"
.br
.RI "ArtyK's Engine File Reader; umm, it reads data from the given file\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#\fBdefine\fP \fBAEFR_ERR_NOERROR\fP   \fBENGINE_MODULE_ERR_NOERROR\fP"
.br
.RI "Macro for the indicator that everything is good/no error was encountered in the process\&. "
.ti -1c
.RI "#\fBdefine\fP \fBAEFR_ERR_READ_SUCCESS\fP   0"
.br
.RI "same as AEFR_ERR_NOERROR - value of a successfull read\&. "
.ti -1c
.RI "#\fBdefine\fP \fBAEFR_ERR_FILE_NOT_OPEN\fP   \-1"
.br
.RI "Macro for the error if file isn't open and file operation functions of the file reader are used\&. "
.ti -1c
.RI "#\fBdefine\fP \fBAEFR_ERR_OPEN_FILE_NAME_EMPTY\fP   \-2"
.br
.RI "Macro for the error if the file name is empty\&. "
.ti -1c
.RI "#\fBdefine\fP \fBAEFR_ERR_OPEN_FILE_DOESNT_EXIST\fP   \-3"
.br
.RI "Macro for the error if the file couldn't be created for some other reason, like missing permissions to access files\&. "
.ti -1c
.RI "#\fBdefine\fP \fBAEFR_ERR_OPEN_FILE_ALREADY_OPENED\fP   \-4"
.br
.RI "Macro for the error that occurs when trying to open the file, while the \fBAEFileReader\fP instance already has an opened file\&. "
.ti -1c
.RI "#\fBdefine\fP \fBAEFR_ERR_READ_EOF\fP   \-5"
.br
.RI "Macro for the error occurring when end of file was reached when reading the file\&. "
.ti -1c
.RI "#\fBdefine\fP \fBAEFR_ERR_READ_ERROR\fP   \-6"
.br
.RI "Macro for the reading error that occurred when reading the file (look up \fBferror()\fP )\&. "
.ti -1c
.RI "#\fBdefine\fP \fBAEFR_ERR_READ_ZERO_SIZE\fP   \-7"
.br
.RI "Macro for the error that occurs if the data pointer, item count and item size is null/zero in \fBAEFileReader::readData_ptr()\fP\&. "
.ti -1c
.RI "#\fBdefine\fP \fBAEFR_ERR_WRONG_CURSOR_ORIGIN\fP   \-8"
.br
.RI "Macro for the error that occurs if invalid cursor origin (not SEEK_SET, SEEK_CUR, or SEEK_END) was passed to \fBAEFileReader::setCursorPos()\fP "
.ti -1c
.RI "#\fBdefine\fP \fB_AEFR_EXIT_ON_CLOSED_FILE\fP   \fBif\fP (\fBthis\fP\->isClosed()) { \fBreturn\fP \fBAEFR_ERR_FILE_NOT_OPEN\fP; }"
.br
.RI "Macro for the shortened 'check for opened file, set error flag and return error flag if closed', DO NOT TOUCH! "
.ti -1c
.RI "#\fBdefine\fP \fB_AEFR_EXIT_ON_READ_CLOSED_FILE\fP   \fBif\fP (\fBthis\fP\->isClosed()) { \fBthis\fP\->m_szLastReadAmount = 0; \fBreturn\fP \fBAEFR_ERR_FILE_NOT_OPEN\fP; }"
.br
.RI "Macro for the shortened 'check for opened file during the read operation, set error flag and return error flag if closed', DO NOT TOUCH! "
.in -1c
.SH "Detailed Description"
.PP 
This file contains the code for the engine's file reader\&. Which is just a small wrapper around the c's FILE api, for speed and convenience\&. One note when using it though: file is blocked from access by other programs when open\&. But maybe that's a good feature ;)
.PP
Should not cause everything to break :) 
.PP
Definition in file \fBAEFileReader\&.hpp\fP\&.
.SH "Macro Definition Documentation"
.PP 
.SS "#\fBdefine\fP _AEFR_EXIT_ON_CLOSED_FILE   \fBif\fP (\fBthis\fP\->isClosed()) { \fBreturn\fP \fBAEFR_ERR_FILE_NOT_OPEN\fP; }"

.PP
Macro for the shortened 'check for opened file, set error flag and return error flag if closed', DO NOT TOUCH! 
.PP
Definition at line \fB70\fP of file \fBAEFileReader\&.hpp\fP\&.
.SS "#\fBdefine\fP _AEFR_EXIT_ON_READ_CLOSED_FILE   \fBif\fP (\fBthis\fP\->isClosed()) { \fBthis\fP\->m_szLastReadAmount = 0; \fBreturn\fP \fBAEFR_ERR_FILE_NOT_OPEN\fP; }"

.PP
Macro for the shortened 'check for opened file during the read operation, set error flag and return error flag if closed', DO NOT TOUCH! 
.PP
Definition at line \fB72\fP of file \fBAEFileReader\&.hpp\fP\&.
.SS "#\fBdefine\fP AEFR_ERR_FILE_NOT_OPEN   \-1"

.PP
Macro for the error if file isn't open and file operation functions of the file reader are used\&. 
.PP
Definition at line \fB43\fP of file \fBAEFileReader\&.hpp\fP\&.
.SS "#\fBdefine\fP AEFR_ERR_NOERROR   \fBENGINE_MODULE_ERR_NOERROR\fP"

.PP
Macro for the indicator that everything is good/no error was encountered in the process\&. 
.PP
Definition at line \fB37\fP of file \fBAEFileReader\&.hpp\fP\&.
.SS "#\fBdefine\fP AEFR_ERR_OPEN_FILE_ALREADY_OPENED   \-4"

.PP
Macro for the error that occurs when trying to open the file, while the \fBAEFileReader\fP instance already has an opened file\&. 
.PP
Definition at line \fB54\fP of file \fBAEFileReader\&.hpp\fP\&.
.SS "#\fBdefine\fP AEFR_ERR_OPEN_FILE_DOESNT_EXIST   \-3"

.PP
Macro for the error if the file couldn't be created for some other reason, like missing permissions to access files\&. 
.PP
Definition at line \fB51\fP of file \fBAEFileReader\&.hpp\fP\&.
.SS "#\fBdefine\fP AEFR_ERR_OPEN_FILE_NAME_EMPTY   \-2"

.PP
Macro for the error if the file name is empty\&. 
.PP
Definition at line \fB48\fP of file \fBAEFileReader\&.hpp\fP\&.
.SS "#\fBdefine\fP AEFR_ERR_READ_EOF   \-5"

.PP
Macro for the error occurring when end of file was reached when reading the file\&. 
.PP
Definition at line \fB57\fP of file \fBAEFileReader\&.hpp\fP\&.
.SS "#\fBdefine\fP AEFR_ERR_READ_ERROR   \-6"

.PP
Macro for the reading error that occurred when reading the file (look up \fBferror()\fP )\&. 
.PP
Definition at line \fB60\fP of file \fBAEFileReader\&.hpp\fP\&.
.SS "#\fBdefine\fP AEFR_ERR_READ_SUCCESS   0"

.PP
same as AEFR_ERR_NOERROR - value of a successfull read\&. 
.PP
Definition at line \fB40\fP of file \fBAEFileReader\&.hpp\fP\&.
.SS "#\fBdefine\fP AEFR_ERR_READ_ZERO_SIZE   \-7"

.PP
Macro for the error that occurs if the data pointer, item count and item size is null/zero in \fBAEFileReader::readData_ptr()\fP\&. 
.PP
Definition at line \fB63\fP of file \fBAEFileReader\&.hpp\fP\&.
.SS "#\fBdefine\fP AEFR_ERR_WRONG_CURSOR_ORIGIN   \-8"

.PP
Macro for the error that occurs if invalid cursor origin (not SEEK_SET, SEEK_CUR, or SEEK_END) was passed to \fBAEFileReader::setCursorPos()\fP 
.PP
Definition at line \fB66\fP of file \fBAEFileReader\&.hpp\fP\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for ArtyK's Console Engine from the source code\&.
